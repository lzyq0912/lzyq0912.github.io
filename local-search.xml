<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>由直方图最大矩形引出单调栈问题</title>
    <link href="/2022/09/17/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/09/17/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="由力扣84引出单调栈问题"><a href="#由力扣84引出单调栈问题" class="headerlink" title="由力扣84引出单调栈问题"></a><center>由力扣84引出单调栈问题</h2><h3 id="leetcode-84"><a href="#leetcode-84" class="headerlink" title=" leetcode 84"></a><center> leetcode 84</h3><p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">输入：heights = [2,1,5,6,2,3]<br>输出：10<br>解释：最大的矩形为图中红色区域，面积为 10<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">输入： heights = [2,4]<br>输出： 4<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= heights.length &lt;=10^5</code></li><li><code>0 &lt;= heights[i] &lt;= 10^4</code></li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a><center>思路</h3><ol><li>这一题一开始看到的时候是不太好想到单调栈的，然而在复习912数据结构的过程中，讲到栈之后邓俊辉老师的pdf中举了这个例题（图1.1），才恍然大悟可以用到单调栈，遂上网搜一下来练手，有所感悟<br><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202209171604805.png" alt="图1.1"><br>可以看到原理是很清晰的，然而由于邓老师大部分时候都是英文授课，因此还是有些不解的地方，自己挑战这一题还是失败了，于是开始看leetcode官方题解，发现讲的甚至更不通俗。。。反思之后才发现是自己对单调栈的用法根本不了解，这就引出了对于单调栈更深刻的学习，查阅资料之后才发现，单调栈是可以用来解决一系列的问题的时空复杂度均为o(n)的算法，例如解决The Next Greater Number问题(图1.2)<br><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202209171609053.png" alt="图1.2"></li><li>那么接下来思路就很清晰了，单调栈问题的一个统一规律就是，在给出的一个数组中，找出从当前秩元素开始，沿某个方向的，第一个具备某个特征的数，这个特征往往是，较小，较大，或者其他可以用比较来判定的数。那么回到力扣84的这一题，寻找连续直方图最大矩形，本质上就是要找出每个元素尽力扩张出来的矩形的面积，然后进行对比，这个面积的计算过程需要长度 * 宽度，那么在当前长度（当前元素下）沿某个方向扩展（寻找宽度）就很符合单调栈的应用场景了。</li><li>首先我们枚举一个柱子<em>i</em>作为高，之后向左右两边扩展，使得扩展到的柱子的高度均不小于 <em>hh</em>。换句话说，我们需要找到<strong>左右两侧最近的高度小于 <em>hh</em> 的柱子</strong>，这样这两根柱子之间（不包括其本身）的所有柱子高度均不小于 <em>hh</em>，并且就是 <em>i</em> 能够扩展到的最远范围。<ul><li>我们用一个栈来存放当前<em>i</em>之前的j值，从栈底到栈顶，<em>j</em> 的值严格单调递增，同时对应的高度值也严格单调递增</li><li>当我们枚举到第 <em>i</em> 根柱子时，我们从栈顶不断地移除 <code>height[j]&gt;=height[i]</code> 的 <em>j</em> 值。在移除完毕后，栈顶的 <em>j</em> 值就一定满足 <code>height[j]&lt;height[i]</code>，此时 <em>j</em> 就是 <em>i</em> 左侧且最近的小于其高度的柱子。<br>这里会有一种特殊情况。如果我们移除了栈中所有的 <em>j</em> 值，那就说明 i 左侧所有柱子的高度都大于height[i]，那么我们可以认为 i 左侧且最近的小于其高度的柱子在位<code>j=-1</code>，它是一根「虚拟」的、高度无限低的柱子。这样的定义不会对我们的答案产生任何的影响，我们也称这根「虚拟」的柱子为「哨兵」。</li><li>我们再将 <em>i</em> 放入栈顶。再用相同的方法，我们从右向左进行遍历，就可以得到左侧的边界了。</li></ul></li><li>代码如下：<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs excel">class Solution &#123;<br>publ<span class="hljs-symbol">ic:</span><br>    <span class="hljs-built_in">int</span> largestRectangleArea(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; heights) &#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span> = heights.size();<br>        vector&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-built_in">left</span>(<span class="hljs-built_in">n</span>), <span class="hljs-built_in">right</span>(<span class="hljs-built_in">n</span>, <span class="hljs-built_in">n</span>);<br>        <br>        stack&lt;<span class="hljs-built_in">int</span>&gt; mono_stack;<br>        for (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">n</span>; ++i) &#123;<br>            while (!mono_stack.empty() &amp;&amp; heights[mono_stack.top()] &gt;= heights[i]) &#123;<br>                <span class="hljs-built_in">right</span>[mono_stack.top()] = i;<br>                mono_stack.pop();<br>            &#125;<br>            <span class="hljs-built_in">left</span>[i] = (mono_stack.empty() ? -<span class="hljs-number">1</span> <span class="hljs-symbol">:</span> mono_stack.top());<br>            mono_stack.push(i);<br>        &#125;<br>        <br>        <span class="hljs-built_in">int</span> ans = <span class="hljs-number">0</span>;<br>        for (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">n</span>; ++i) &#123;<br>            ans = <span class="hljs-built_in">max</span>(ans, (<span class="hljs-built_in">right</span>[i] - <span class="hljs-built_in">left</span>[i] - <span class="hljs-number">1</span>) * heights[i]);<br>        &#125;<br>        return ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>时间复杂度分析：每个元素只需要进栈一次，出栈一次，因此时间复杂度O(n)，空间复杂度，申请了一个空间为n的栈，因此空间复杂度为O(n)。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>DSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/16/hello-world/"/>
    <url>/2022/09/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
