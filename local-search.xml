<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>动态规划-背包问题</title>
    <link href="/2023/01/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2023/01/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h2 id="动态规划-背包问题"><a href="#动态规划-背包问题" class="headerlink" title="动态规划-背包问题"></a><center>动态规划-背包问题</center></h2><p>动态规划可以分为状态表示和状态计算，首先思考整个问题需要用几维的状态来表示，例如背包问题，可以用两维来表示；状态计算就是找出状态转移的方程。DP优化就是对状态标识或者计算方程做等价变形，因此一般建议先写出基本的动态规划写法，不考虑优化。</p><ol><li><p>状态表示<code>f(i,j)</code><br>状态表示可以分为集合和属性两种。属性即题目所问的最大值（如背包问题中的价值最大），最小值，数量等属性。集合表示的是选法的集合，而非物品的集合，集合需要满足条件（以01背包题意为例）：</p><ol><li>只从前<code>i</code>个物品中选</li><li>选出来的物品的总体积<code>V&lt;=j</code><br>满足这两个条件的所有选法的一个集合即是<code>f(i,j)</code>，我们实时更新的题目的答案是集合中的某个属性，例如上文中提到的“最大值”。因此答案即可表示为<code>f(N,V)</code></li></ol></li><li><p>状态计算<br> 对应的是集合的划分，以01背包为例，<code>f(i,j)</code>作为选法的集合，因此我们可以将<code>f(i,j)</code>如图划分为两部分，一部分包含选第<code>i</code>个物品的情况，一部分包含不含<code>i</code>的情况。</p><ol><li>从<code>1~i</code>中选且不含<code>i</code>，总体积不超过<code>j</code>，这种情况下的最大值，因此其实是<code>f(i-1,j)</code></li><li>所有从<code>1~i</code>中选，总体积不超过<code>j</code>，且必须包含第<code>i</code>个物品，这种情况下的最大值。这种方法不好直接表示，因此可以用其他方法来表示：我们首先把所有选法中的第<code>i</code>个物品全部去掉，即从<code>i-1</code>中选，最后以这种情况下选法的结果再加上第<code>i</code>个物品的价值，由于我们选第<code>i</code>个物品的体积上限是<code>j</code>，去掉<code>i</code>的话，体积上限就是<code>j-V[i]</code>，因此这种情况的表示就很明显了，即为<code>f(i-1,j-V[i])+W[i]</code><br> 需要注意的是这种情况下，实际上有可能不存在，在<code>v[i]&gt;j</code>的情况下<br>因此我们可以知道，对于01背包问题来说，我们最终的状态转移方程：<br><code>f(i,j) = max(f(i-1,j),f(i-1,j-v[i]) + w[i])</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301021042999.png" alt="动态规划集合划分"></p></li></ol><h4 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a><center>01背包问题</center></h4><p>有<code>N</code>个物品和容量为<code>V</code>的背包，每个物品有两个属性，<code>V[i]</code>与<code>W[i]</code>；每件物品仅能使用一次；挑选一些物品，使总体积小于背包容量，同时拥有尽可能大的价值，此类问题被称为01背包问题。</p><h5 id="典型解答："><a href="#典型解答：" class="headerlink" title="典型解答："></a>典型解答：</h5><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs inform7">#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br><br>const int N = 1010;<br><br>int n,m;<br>int v<span class="hljs-comment">[N]</span>,w<span class="hljs-comment">[N]</span>;<br>int f<span class="hljs-comment">[N]</span><span class="hljs-comment">[N]</span>;<br><br>int main()<br>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    for(int i = 1;i&lt;=n;i++) cin &gt;&gt; v<span class="hljs-comment">[i]</span> &gt;&gt; w<span class="hljs-comment">[i]</span>;<br>    for(int i = 1;i&lt;=n;i++)<br>        for(int j = 0;j&lt;=m;j++)<br>        &#123;<br>            f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = f<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>;<br>            if(j &gt;= v<span class="hljs-comment">[i]</span>)  f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>]</span>+w<span class="hljs-comment">[i]</span>);<br><br>        &#125;<br>    cout &lt;&lt; f<span class="hljs-comment">[n]</span><span class="hljs-comment">[m]</span> &lt;&lt; endl;<br>    return 0;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="问题优化"><a href="#问题优化" class="headerlink" title="问题优化"></a>问题优化</h5><ol><li>如何将01背包问题优化成一维的呢？<br>我们删掉了第一维：在前<code>i</code>个物品中取，因此现在的<code>f[j]</code>表示拿了总体积不超过j的物品的最大价值。</li><li>转化为一维的前提条件<br>我们观察代码发现每次更新对于循环中的下一组<code>i</code>，只需要用<code>i-1</code>来更新当前的值，而不需要再往前的数组，因此我们可以在本次更新时覆盖<code>i-1</code>之前的，因为根本用不到。<br>同时对于j的更新，我们每次只需要使用之前<code>i-1</code>时的<code>j</code>或者<code>j-v[i]</code>，不会用到后面的值，因此我们从后往前倒着更新，也可以直接覆盖之前循环中的值，总的来说，只用一维循环即可。</li><li>如何转化<br>只用一个数组，如果不拿第<code>i</code>件，和前面的一样，不用更新；如果拿了第i件需要和前一位<code>i-1</code>上的比较得出<code>max</code>,更新方式变为：<code>f[j] = max(f[j],f[j - v[i]]+w[i])</code>；每次<code>i++</code>都从后往前更新一遍<code>f</code>数组，观测每个位置的值是否更新。<br>因此01背包的优化代码核心部分如下<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">for(int i = 1;i&lt;=n;i++)<br>    for(int j = m;j&gt;=v<span class="hljs-comment">[i]</span>;j--)<br>        f<span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>]</span> + w<span class="hljs-comment">[i]</span>);<br></code></pre></td></tr></table></figure></li></ol><h4 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a><center>完全背包问题</center></h4><p>每件物品无限个，只要体积够用无限装物品</p><p>跟01背包很像，整体就是多了一个选了几个的参数<code>k</code><br><code>f[i][j] = f[i-1][j-v[i]*k]+w[i]*k</code>;<br>因此朴素做法显而易见，核心代码如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs inform7">cin &gt;&gt; n &gt;&gt; m;<br>for(int i = 1;i&lt;=n;i++) cin &gt;&gt; v<span class="hljs-comment">[i]</span> &gt;&gt; w<span class="hljs-comment">[i]</span>;<br>for(int i = 1;i&lt;=n;i++)<br>    for(int j = 0;j&lt;=m;j++)<br>        for(int k = 0;k*v<span class="hljs-comment">[i]</span>&lt;=j;k++)<br>        f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>*k]</span>+w<span class="hljs-comment">[i]</span>*k);<br>cout &lt;&lt; f<span class="hljs-comment">[n]</span><span class="hljs-comment">[m]</span> &lt;&lt; endl;<br>return 0;<br></code></pre></td></tr></table></figure><h5 id="问题优化-1"><a href="#问题优化-1" class="headerlink" title="问题优化"></a>问题优化</h5><p>这种三重循环的写法数据稍微多点就会超时，因此可以优化到二重循环<br>我们注意到如图所示的情况，发现<code>f[i][j]</code>可以从<code>f[i][j - v]</code>推导出来，因此<code>f[i][j] = max(f[i-1][j],f[i][j - v] + w[i])</code></p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301022013044.png" alt="f[i][j]的推导关系"></p><p>如此，核心代码变为</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs inform7">cin &gt;&gt; n &gt;&gt; m;<br>for(int i = 1;i&lt;=n;i++) cin &gt;&gt; v<span class="hljs-comment">[i]</span> &gt;&gt; w<span class="hljs-comment">[i]</span>;<br>for(int i = 1;i&lt;=n;i++)<br>    for(int j = 0;j&lt;=m;j++)<br>    &#123;<br>        f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = f<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>;<br>        if(j&gt;=v<span class="hljs-comment">[i]</span>)<br>            f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>]</span>+w<span class="hljs-comment">[i]</span>);<br>    &#125;<br>cout &lt;&lt; f<span class="hljs-comment">[n]</span><span class="hljs-comment">[m]</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>之后继续进行一维优化，参考01背包的例子，完全背包做一维优化的时候不需要考虑<code>f[j-v[i]]</code>的更新问题，因为这里按照更新顺序确实是第<code>i</code>重循环的值，与二维的代码符合，而01背包中需要更新第<code>i-1</code>重循环的值，因此这里完全背包不需要倒着循环，优化后核心代码如下</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">cin &gt;&gt; n &gt;&gt; m;<br>for(int i = 1;i&lt;=n;i++) cin &gt;&gt; v<span class="hljs-comment">[i]</span> &gt;&gt; w<span class="hljs-comment">[i]</span>;<br>for(int i = 1;i&lt;=n;i++)<br>    for(int j = v<span class="hljs-comment">[i]</span>;j&lt;=m;j++)<br>    &#123;<br>        if(j&gt;=v<span class="hljs-comment">[i]</span>)<br>            f<span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>]</span>+w<span class="hljs-comment">[i]</span>);<br>    &#125;<br>cout &lt;&lt; f<span class="hljs-comment">[m]</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>搞笑的事情发生了，我们可以发现01背包问题与完全背包问题的最终代码只在第二重循环的顺序上有差别，因此代码上的微小差距其实可能是思维上的天翻地覆，一定要把握推导过程而不是死记硬背。</p><h4 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a><center>多重背包问题</center></h4><p>每个物品个数不一样，每个物品最多有<code>S[i]</code>个，多重背包问题的状态转移方程和完全背包问题极为类似，因为本质上只是加了选择物品的上限。<br><code>f[i][j] = max(f[i-1][j-v[i]*k] + w[i]*k); k = 0,1,2,...,s[i];</code><br>因此朴素解法代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> v[N],w[N];<br><span class="hljs-type">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; v[i] &gt;&gt; w[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = v[i];j&lt;=m;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(j&gt;=v[i])<br>                f[j] = <span class="hljs-built_in">max</span>(f[j],f[j-v[i]]+w[i]);<br>        &#125;<br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="问题优化-2"><a href="#问题优化-2" class="headerlink" title="问题优化"></a>问题优化</h5><p>朴素解法在数据上限为100的情况下不会超时，但是某种多重背包问题数据上限更高，因此需要优化后才不会导致超时问题，我们称这种加数据上限的多重背包问题为多重背包Ⅱ。</p><p>这里我们想要继续按照完全背包的方式优化，然而将会发现f[i][j]的推导关系如下：</p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301030918138.png" alt="多重背包f[i][j]推导关系"></p><p>这里的<code>f[i][j]</code>与<code>f[i][j-v]</code>并不完全相似，在最大值关系中不能直接推导，因此我们需要另一种优化方式<br>我们参考海明码的校验位与被校验位的关系，即任何一位自然数可以由2的整数幂或者2的整数幂本身凑出来，例如<code>3 = 1 + 2；5 = 1 + 4；</code>等等，因此我们可以把其中的一维优化成<code>logn</code>级别，我们用1~2整数幂中的数凑出一个小于目标数值的数，最后再加上差值即可。例如下图，我们将200凑成如下的数，最后加上73即可凑出200以内的所有数。</p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301030925008.png" alt="凑数关系"></p><p>这也就是二进制优化的思想。代码和代码注释如下：</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-keyword">int</span> main()<br>&#123;<br>    cin &gt;&gt; n &gt;&gt; m<span class="hljs-comment">;</span><br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">cnt</span> = <span class="hljs-number">0</span><span class="hljs-comment">; //存储所有新的物品的编号</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span><span class="hljs-comment">;i&lt;=n;i++)</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> a,b,s<span class="hljs-comment">;</span><br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; s<span class="hljs-comment">; //读入当前物品的体积价值与个数</span><br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>        <span class="hljs-keyword">while</span>(k&lt;=s)   <span class="hljs-comment">//把k个物品打包在一起</span><br>        &#123;<br>            <span class="hljs-keyword">cnt</span>++<span class="hljs-comment">;</span><br>            v[<span class="hljs-keyword">cnt</span>] = a*k<span class="hljs-comment">;</span><br>            w[<span class="hljs-keyword">cnt</span>] = b*k<span class="hljs-comment">;</span><br>            s-=k<span class="hljs-comment">;</span><br>            k*=<span class="hljs-number">2</span><span class="hljs-comment">;</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(s &gt; <span class="hljs-number">0</span>)   <span class="hljs-comment">//还剩下一些需要补上（非二次幂，例如200中的73）</span><br>        &#123;<br>            <span class="hljs-keyword">cnt</span> ++ <span class="hljs-comment">;</span><br>            v[<span class="hljs-keyword">cnt</span>] = a*s<span class="hljs-comment">;</span><br>            w[<span class="hljs-keyword">cnt</span>] = b*s<span class="hljs-comment">;</span><br>        &#125;<br>    &#125;<br>    n = <span class="hljs-keyword">cnt</span><span class="hljs-comment">;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span><span class="hljs-comment">;i&lt;=n;i++)  //以cnt作为物品个数做一次01背包</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = m<span class="hljs-comment">;j&gt;=v[i];j--)&#123;</span><br>            f[j] = max(f[j],f[j-v[i]]+w[i])<span class="hljs-comment">;</span><br>        &#125;<br>    cout &lt;&lt; f[m] &lt;&lt; endl<span class="hljs-comment">;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>该算法的数组上限如下：<br>一共有最多<code>N</code>件物品，每种物品取最多<code>S</code>件，本题中<code>N = 1000; S = 2000;</code>每种物品最多拆分打包成<code>log2000</code>，因此我们的数组需要开到<code>1000*11</code>的数组上限，从而不至于引发RE</p><h4 id="分组背包问题"><a href="#分组背包问题" class="headerlink" title="分组背包问题"></a><center>分组背包问题</center></h4><p>物品有<code>N</code>组，每组物品里有若干个，例如水果，蔬菜组分别有苹果香蕉，白菜番茄等等；每一组里最多只能选一个物品，选了某种水果就不能选其他水果，在这个限制条件下找最大价值。</p><p>观察题意发现，分组背包与完全背包问题的差别在于，完全背包问题考虑的是第<code>i</code>个物品选几个，分组背包考虑的问题是第<code>i</code>组物品选<code>&#39;哪&#39;</code>个</p><p>那么状态转移方程可以划分为，第i组物品一个都不选，和第i组物品中选第k个物品，那么状态转移方程为：<br><code>f[i][j] = max(f[i-1][j],f[i-1][j-v[i][k]] + w[i][k])</code><br>根据状态转移方程写出代码如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs inform7">#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br><br>const int N = 110;<br>int n,m;<br>int v<span class="hljs-comment">[N]</span><span class="hljs-comment">[N]</span>,w<span class="hljs-comment">[N]</span><span class="hljs-comment">[N]</span>,s<span class="hljs-comment">[N]</span>;<br>int f<span class="hljs-comment">[N]</span>;<br><br>int main()<br>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    for(int i = 1;i&lt;=n;i++)<br>    &#123;<br>        cin &gt;&gt; s<span class="hljs-comment">[i]</span>;<br>        for(int j = 0;j&lt;s<span class="hljs-comment">[i]</span>;j++)<br>            cin &gt;&gt; v<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> &gt;&gt; w<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>;<br>    &#125;<br>    for(int i = 1;i&lt;=n;i++)<br>        for(int j = m;j&gt;=0;j--)<br>            for(int k = 0;k&lt;s<span class="hljs-comment">[i]</span>;k++)<br>            &#123;<br>                if(v<span class="hljs-comment">[i]</span><span class="hljs-comment">[k]</span> &lt;= j)<br>                    f<span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[j - v<span class="hljs-comment">[i]</span><span class="hljs-comment">[k]</span>]</span> + w<span class="hljs-comment">[i]</span><span class="hljs-comment">[k]</span>);<br>            &#125;<br>    <br>    cout &lt;&lt; f<span class="hljs-comment">[m]</span> &lt;&lt; endl;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么就到此为止吧，再写就不礼貌了，还是要谢谢你，背包问题💘</p><p><del>本篇所有思想来自于AcWing大雪菜老师，仅作学习记录使用</del></p>]]></content>
    
    
    <categories>
      
      <category>算法、DSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>算法</tag>
      
      <tag>模板题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL</title>
    <link href="/2022/11/12/STL/"/>
    <url>/2022/11/12/STL/</url>
    
    <content type="html"><![CDATA[<h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a><center>STL</h3><p><code>a.size()</code>和<code>a.empty()</code>不是唯一的，每个stl都可以如此调用，操作复杂度为<code>o(1)</code>直接取</p><h5 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h5><p>变长数组，动态扩容，双倍扩容，分摊复杂度o(1)<br><code>vector&lt;int&gt; a(10,3)</code>定义一个长度为10的vector，里面每个数都是3</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">front</span>()/<span class="hljs-title">back</span>();<span class="hljs-title">push_back</span>()/<span class="hljs-variable">pop_back</span>;<span class="hljs-title">begin</span>()/<span class="hljs-title">end</span>();<span class="hljs-title">empty</span>();<span class="hljs-title">erase</span>();</span><br></code></pre></td></tr></table></figure><p><code>for(auto x:a)</code>为C++11中引入的范围遍历，代码更短效率更高。<br>vector支持比较运算</p><h5 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h5><p><code>pair&lt;int,int&gt;</code>存储一个二元组，前后变量类型可以任意，<code>eg:pair&lt;int,string&gt;</code>，其中调用<code>a.first</code>返回第一个元素，<code>a.second</code>返回第二个元素，也支持比较，以<code>first</code>为第一关键字，以<code>second</code>为第二关键字。可以同时存两种属性。甚至可以嵌套存储三个不同的属性。</p><h5 id="string"><a href="#string" class="headerlink" title="string"></a>string</h5><p>字符串,<code>substr()</code>返回某一个子串，<code>c_str()</code>返回一个字符数组的头指针（起始地址）。<br><code>string a = &quot;lzyq&quot;,a += &quot;acwing&quot;;</code>可以实现字符串拼接<br><code>a.substr(1,2)</code>即返回zy，省略第二个参数或溢出则返回整个字串<br><code>size()/length()</code>返回字符串长度</p><h5 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">往队尾插入，<span class="hljs-built_in">push</span>();<br>返回队头元素，<span class="hljs-built_in">front</span>();<br>返回队尾元素，<span class="hljs-built_in">back</span>();<br>把队头弹出，<span class="hljs-built_in">pop</span>();<br>无法<span class="hljs-attribute">clear</span>()<br></code></pre></td></tr></table></figure><h5 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h5><p>优先级队列，默认是大根堆<br><code>#include &lt;queue&gt;</code></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">priority_queue&lt;<span class="hljs-type">int</span>&gt; heap;<span class="hljs-comment">//大根堆</span><br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt;&gt; heap;<span class="hljs-comment">//小根堆</span><br><span class="hljs-built_in">push</span>()往堆里插入元素，<span class="hljs-built_in">top</span>()返回堆顶，<span class="hljs-built_in">pop</span>()弹出堆顶，类似于<span class="hljs-built_in">delmax</span>()<br>没有clear函数<br></code></pre></td></tr></table></figure><h5 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h5><p>栈</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">push</span>();<span class="hljs-attribute">top</span>();<span class="hljs-built_in">pop</span>();<span class="hljs-built_in">size</span>();<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></table></figure><h5 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h5><p>加强版vector，双端队列，队头队尾均可以插入删除，而且支持随机访问<code>[]</code></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">size</span>();<span class="hljs-title">empty</span>();<span class="hljs-title">clear</span>();<span class="hljs-title">front</span>();<span class="hljs-title">back</span>();<span class="hljs-title">push_back</span>()/<span class="hljs-title">pop_back</span>();<span class="hljs-title">push_front</span>()/<span class="hljs-title">pop_front</span>();<span class="hljs-title">begin</span>()/<span class="hljs-title">end</span>();</span><br></code></pre></td></tr></table></figure><p>支持随机寻址，效率低到令人发指</p><h5 id="set，map，multiset，multimap"><a href="#set，map，multiset，multimap" class="headerlink" title="set，map，multiset，multimap"></a>set，map，multiset，multimap</h5><p><code>#include &lt;map&gt;</code><br>操作时间复杂度基本上都是<code>o(logn)</code><br>基于BBST(红黑树)，动态维护有序序列。</p><ol><li><code>set</code>里面不可以有重复元素，如果插入重复会被忽略，<code>multiset</code>可以有重复元素 <figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">insert</span>()插入一个数;</span><br><span class="hljs-function"><span class="hljs-title">find</span>()查找一个数;</span><br><span class="hljs-function"><span class="hljs-title">count</span>()返回某个数的个数;</span><br><span class="hljs-function"><span class="hljs-title">erase</span>()</span><br>    输入是一个数则删除所有等于这个数的节点，输入迭代器，删除这个迭代器。<br><span class="hljs-function"><span class="hljs-title">lower_bound</span>()/<span class="hljs-title">upper_bound</span>();</span><br><span class="hljs-function">    前者返回大于等于<span class="hljs-variable">x</span>最小的数，后者返回大于<span class="hljs-variable">x</span>的最小的数。具有迷惑性。</span><br></code></pre></td></tr></table></figure></li><li><code>map</code>和<code>multimap</code>也支持<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">insert</span>();插入的数是一个pair<br>erase;输入的参数是pair或者迭代器<br><span class="hljs-built_in">find</span>();<br>可以像数组一样来使用<br>eg:map&lt;string,<span class="hljs-type">int</span>&gt; a;<br>a[<span class="hljs-string">&quot;lzyq&quot;</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">//即可完成映射</span><br><span class="hljs-built_in">lower_bound</span>()/<span class="hljs-built_in">upper_bound</span>();<br></code></pre></td></tr></table></figure></li></ol><h5 id="unordered-set，unordered-map，unordered-multiset，unordered-multimap"><a href="#unordered-set，unordered-map，unordered-multiset，unordered-multimap" class="headerlink" title="unordered_set，unordered_map，unordered_multiset，unordered_multimap"></a>unordered_set，unordered_map，unordered_multiset，unordered_multimap</h5><p>基于哈希表来实现的，基本和上面的一样，增删改查时间复杂度都是<code>o(1)</code>,不支持<code>lower_bound()/upper_bound()</code>;也支持迭代器的++，–</p><h5 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h5><p>和位图应该是一个原理，但是不太一样，压缩成位图进行存储<br><code>bitset&lt;10000&gt; A</code>定义一个长度为10000的bitset<br>支持<code>~,&amp;,|,^,&gt;&gt;,&lt;&lt;,&gt;&gt;,==,!=,[];</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">count</span>()返回有多少个<span class="hljs-number">1</span>;<br><span class="hljs-built_in">any</span>()判断是否至少有一个<span class="hljs-number">1</span>;<br><span class="hljs-attribute">none</span>()判断是否全为<span class="hljs-number">0</span>;<br><span class="hljs-built_in">set</span>()把所有位置变成<span class="hljs-number">1</span>;<br><span class="hljs-built_in">set</span>(k,v)把第k位变成v;<br><span class="hljs-built_in">reset</span>()把所有位变成<span class="hljs-number">0</span><br><span class="hljs-built_in">flip</span>()等价于~;<br><span class="hljs-built_in">flip</span>(k)把第k位取反;<br></code></pre></td></tr></table></figure><h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><p>列表，ListNode之类的</p><h4 id="事实上没啥用的东西，因为要用的时候直接搜索就好了"><a href="#事实上没啥用的东西，因为要用的时候直接搜索就好了" class="headerlink" title="事实上没啥用的东西，因为要用的时候直接搜索就好了"></a><del>事实上没啥用的东西，因为要用的时候直接搜索就好了</del></h4>]]></content>
    
    
    <categories>
      
      <category>语言基础、DSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语言基础</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串哈希</title>
    <link href="/2022/11/12/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/"/>
    <url>/2022/11/12/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a><center>字符串哈希</center></h2><h4 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h4><p>核心在于把字符串想象成一个p进制的数，得出一个前缀的哈希值，p一般取131，13331时不会发生冲突，因为这个数会比较大，因此需要Mod Q处理，得到一个在0~Q-1之间。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>首先数字不能映射成0，因为0的p进制还是0，因此多个同样的数字，不同的字符串就变成了同样的数字。</li><li>字符串哈希是一个假设不会发生冲突的过程，p取131或13331，Q取2^64，没有处理冲突的能力。</li><li>可以利用一个前缀哈希，利用一个公式计算出来任何一个字串的哈希值。</li><li>实质上不需要取模，计算机中可以利用unsigned long long 来存储所有的h，将溢出实现取模的效果。</li></ol><h4 id="求解方法"><a href="#求解方法" class="headerlink" title="求解方法"></a>求解方法</h4><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202211111713666.png" alt="求解方法"><br>由此可见h[l-r] &#x3D; h[r] - h[l] * P^(r-l+1)</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>由此可知我们的结论，h[i] &#x3D; h[i-1] * P + str[i]; </p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><center>AcWing 841.字符串哈希</center><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>,P = <span class="hljs-number">131</span>;<br><br><span class="hljs-keyword">typedef</span>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br><br><span class="hljs-type">int</span> n ,m;<br><span class="hljs-type">char</span> str[N];<br>ULL h[N],p[N];<br><br><span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> h[r]-h[l<span class="hljs-number">-1</span>]*p[r-l+<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%s&quot;</span>,&amp;n,&amp;m,str+<span class="hljs-number">1</span>);<br>    p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        p[i] = p[i<span class="hljs-number">-1</span>] * P;<br>        h[i] = h[i<span class="hljs-number">-1</span>] * P + str[i];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> l1,r1,l2,r2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;l1,&amp;r1,&amp;l2,&amp;r2);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">get</span>(l1,r1)==<span class="hljs-built_in">get</span>(l2,r2)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202211111721941.png" alt="运行截图"></p>]]></content>
    
    
    <categories>
      
      <category>算法、DSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>算法</tag>
      
      <tag>模板题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>由直方图最大矩形引出单调栈问题</title>
    <link href="/2022/09/17/%E7%94%B1%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2%E5%BC%95%E5%87%BA%E5%8D%95%E8%B0%83%E6%A0%88%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/17/%E7%94%B1%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2%E5%BC%95%E5%87%BA%E5%8D%95%E8%B0%83%E6%A0%88%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="由力扣84引出单调栈问题"><a href="#由力扣84引出单调栈问题" class="headerlink" title="由力扣84引出单调栈问题"></a><center>由力扣84引出单调栈问题</h2><h3 id="leetcode-84"><a href="#leetcode-84" class="headerlink" title=" leetcode 84"></a><center> leetcode 84</h3><p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">输入：heights = [2,1,5,6,2,3]<br>输出：10<br>解释：最大的矩形为图中红色区域，面积为 10<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">输入： heights = [2,4]<br>输出： 4<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= heights.length &lt;=10^5</code></li><li><code>0 &lt;= heights[i] &lt;= 10^4</code></li></ul><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a><center>思路</h3><ol><li>这一题一开始看到的时候是不太好想到单调栈的，然而在复习912数据结构的过程中，讲到栈之后邓俊辉老师的pdf中举了这个例题（图1.1），才恍然大悟可以用到单调栈，遂上网搜一下来练手，有所感悟<br><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202209171604805.png" alt="图1.1" title="图1.1"><br>可以看到原理是很清晰的，然而由于邓老师大部分时候都是英文授课，因此还是有些不解的地方，自己挑战这一题还是失败了，于是开始看leetcode官方题解，发现讲的甚至更不通俗。。。反思之后才发现是自己对单调栈的用法根本不了解，这就引出了对于单调栈更深刻的学习，查阅资料之后才发现，单调栈是可以用来解决一系列的问题的时空复杂度均为o(n)的算法，例如解决The Next Greater Number问题(图1.2)<br><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202209171609053.png" alt="图1.2" title="图1.2"></li><li>那么接下来思路就很清晰了，单调栈问题的一个统一规律就是，在给出的一个数组中，找出从当前秩元素开始，沿某个方向的，第一个具备某个特征的数，这个特征往往是，较小，较大，或者其他可以用比较来判定的数。那么回到力扣84的这一题，寻找连续直方图最大矩形，本质上就是要找出每个元素尽力扩张出来的矩形的面积，然后进行对比，这个面积的计算过程需要长度 * 宽度，那么在当前长度（当前元素下）沿某个方向扩展（寻找宽度）就很符合单调栈的应用场景了。</li><li>首先我们枚举一个柱子<em>i</em>作为高，之后向左右两边扩展，使得扩展到的柱子的高度均不小于 <em>hh</em>。换句话说，我们需要找到<strong>左右两侧最近的高度小于 <em>hh</em> 的柱子</strong>，这样这两根柱子之间（不包括其本身）的所有柱子高度均不小于 <em>hh</em>，并且就是 <em>i</em> 能够扩展到的最远范围。<ul><li>我们用一个栈来存放当前<em>i</em>之前的j值，从栈底到栈顶，<em>j</em> 的值严格单调递增，同时对应的高度值也严格单调递增</li><li>当我们枚举到第 <em>i</em> 根柱子时，我们从栈顶不断地移除 <code>height[j]&gt;=height[i]</code> 的 <em>j</em> 值。在移除完毕后，栈顶的 <em>j</em> 值就一定满足 <code>height[j]&lt;height[i]</code>，此时 <em>j</em> 就是 <em>i</em> 左侧且最近的小于其高度的柱子。<br>这里会有一种特殊情况。如果我们移除了栈中所有的 <em>j</em> 值，那就说明 i 左侧所有柱子的高度都大于height[i]，那么我们可以认为 i 左侧且最近的小于其高度的柱子在位<code>j=-1</code>，它是一根「虚拟」的、高度无限低的柱子。这样的定义不会对我们的答案产生任何的影响，我们也称这根「虚拟」的柱子为「哨兵」。</li><li>我们再将 <em>i</em> 放入栈顶。再用相同的方法，我们从右向左进行遍历，就可以得到左侧的边界了。</li></ul></li><li>代码如下：<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs excel">class Solution &#123;<br>publ<span class="hljs-symbol">ic:</span><br>    <span class="hljs-built_in">int</span> largestRectangleArea(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; heights) &#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span> = heights.size();<br>        vector&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-built_in">left</span>(<span class="hljs-built_in">n</span>), <span class="hljs-built_in">right</span>(<span class="hljs-built_in">n</span>, <span class="hljs-built_in">n</span>);<br>        <br>        stack&lt;<span class="hljs-built_in">int</span>&gt; mono_stack;<br>        for (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">n</span>; ++i) &#123;<br>            while (!mono_stack.empty() &amp;&amp; heights[mono_stack.top()] &gt;= heights[i]) &#123;<br>                <span class="hljs-built_in">right</span>[mono_stack.top()] = i;<br>                mono_stack.pop();<br>            &#125;<br>            <span class="hljs-built_in">left</span>[i] = (mono_stack.empty() ? -<span class="hljs-number">1</span> <span class="hljs-symbol">:</span> mono_stack.top());<br>            mono_stack.push(i);<br>        &#125;<br>        <br>        <span class="hljs-built_in">int</span> ans = <span class="hljs-number">0</span>;<br>        for (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">n</span>; ++i) &#123;<br>            ans = <span class="hljs-built_in">max</span>(ans, (<span class="hljs-built_in">right</span>[i] - <span class="hljs-built_in">left</span>[i] - <span class="hljs-number">1</span>) * heights[i]);<br>        &#125;<br>        return ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>时间复杂度分析：每个元素只需要进栈一次，出栈一次，因此时间复杂度O(n)，空间复杂度，申请了一个空间为n的栈，因此空间复杂度为O(n)。</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法、DSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>算法</tag>
      
      <tag>模板题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/16/hello-world/"/>
    <url>/2022/09/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
