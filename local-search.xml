<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数学知识-1</title>
    <link href="/2023/01/20/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86-1/"/>
    <url>/2023/01/20/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86-1/</url>
    
    <content type="html"><![CDATA[<h2 align = "center">数学知识-质数与约数</h2><h4 id="质数"><a class="markdownIt-Anchor" href="#质数"></a> 质数</h4><p>小学数学知识，在大于1的自然数中，只包含1和其本身两个因数的自然数，被称为质数或者素数。</p><p>质数判定的几种相关题型：</p><h5 id="试除法"><a class="markdownIt-Anchor" href="#试除法"></a> 试除法</h5><p>从质数性质出发的一种优化算法，假若枚举每个小于n的自然数判定是否满足质数的条件，时间复杂度过高；然而我们可以发现一个性质，即<strong>假若某个数<code>d</code>可以整除<code>n</code>，那么<code>n/d</code>一定也可以整除<code>n</code></strong>，由此性质，我们可以将枚举的范围缩小到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><msqrt><mi>n</mi></msqrt><mtext> </mtext><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">(1,\sqrt{n}\:]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mclose">]</span></span></span></span>，故试除法判定质数算法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">is_prime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;=n/i;i++)<br>        <span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>不建议使用sqrt(n)计算，原因是sqrt函数调用时间复杂度本身也很高；也不建议使用<code>i*i = n</code>这种写法，有溢出风险，以上做法的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Theta(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p></blockquote><h5 id="分解质因数"><a class="markdownIt-Anchor" href="#分解质因数"></a> 分解质因数</h5><p>给定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，将每个数分解质因数，并按照质因数从小到大的顺序输出每个质因数的底数和指数。</p><p>分解质因数的理论依托是<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86">算术基本定理</a>，又称为正整数唯一分解定理，即每个大于1的自然数，要么本身是质数，要么可以写成2个或以上的质数的乘积，且质因子从小到大排列只有一种写法。例如：<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6936</mn><mo>=</mo><msup><mn>2</mn><mn>3</mn></msup><mo>×</mo><mn>3</mn><mo>×</mo><msup><mn>5</mn><mn>2</mn></msup><mo separator="true">,</mo><mn>1200</mn><mo>=</mo><msup><mn>2</mn><mn>4</mn></msup><mo>×</mo><mn>3</mn><mo>×</mo><msup><mn>5</mn><mn>2</mn></msup><mo separator="true">,</mo><mn>5207</mn><mo>=</mo><mn>41</mn><mo>×</mo><mn>127</mn></mrow><annotation encoding="application/x-tex">6936 = 2^3\times3\times5^2,1200 = 2^4\times3\times5^2,5207 = 41\times127</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">9</span><span class="mord">3</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mord">2</span><span class="mord">0</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">7</span></span></span></span></p><p>用数学解决算法问题并且进行优化的基础范例，联系上题中的试除法判定质数，思维很容易延展到，遍历从1到<code>n</code>的自然数，先检验能否整除，再检验是否质数，检验通过之后进行反复的<code>/=</code>操作并用<code>cnt</code>计数得出指数，这样做看似可行，但是 <s>“这样做你就慢了”</s>。</p><p>考虑如下的规律：对于任意一个整除<code>n</code>的数<code>i</code>，我们的基础算法也已经把从2到<code>i-1</code>的所有因子枚举过一遍了，故经过<code>/=</code>操作之后现在的n中不包括任何2到<code>i-1</code>之间的质因子，故只要满足<code>n%i==0</code>，对于可以整除<code>n</code>的<code>i</code>来说,其也不包括<strong>任何</strong>2到<code>i-1</code>之间的任何质因子，故实际上，就分解质因数的代码而言，我们<strong>根本不需要判定质数</strong>。现在，我们的算法时间复杂度变成了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>；</p><p>那么能不能继续优化？答案是肯定的。假设<code>n</code>中有两个大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>的质因子，那么即使这两个质因子指数均为1，相乘也绝对大于<code>n</code>，所以我们可以得出结论：<code>n</code>中最多只会有一个大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>的质因子，那么，实际上我们上面的循环只需与试除法判定的循环截至条件相同即可，最后再对大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>的质因子进行单独讨论即可，且此时这个大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>的质因子就是算法得出的<code>n</code>本身，其指数也必定为1；算法的时间复杂度降为了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><p>优化后的算法如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl">void divide(<span class="hljs-keyword">int</span> a)<br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i&lt;=a/i;i++)<br>        <span class="hljs-keyword">if</span>(a%i==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(a%i == <span class="hljs-number">0</span>)<br>            &#123;<br>                a/=i;<br>                s++;<br>            &#125;<br>            <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,i,s);<br>        &#125;<br>    <span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">1</span>) <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,a,<span class="hljs-number">1</span>);<br>    puts(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="筛法"><a class="markdownIt-Anchor" href="#筛法"></a> 筛法</h5><p>给定一个正整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，请你求出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1∼n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>中质数的个数</p><p>个人比较熟悉的筛法：埃拉斯托尼的筛子。</p><p>朴素的筛法通俗来讲即首先列举<code>2</code>到<code>n</code>的所有自然数，每次枚举到某个数时，将该数的倍数筛出去，最后剩下的就是质数。这种做法可以简易证明：假定某数<code>p</code>未被<code>2~(p-1)</code>中任何数标记为倍数，也就是说，<code>p</code>不是任何一个<code>2~(p-1)</code>的数的倍数，那么在<code>2~(p-1)</code>中不存在任何<code>p</code>的约数，由质数定义，<code>p</code>是质数</p><p>基本的代码可以实现为：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span> ;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!st[i])<br>        &#123;<br>            prime[cnt++]  = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+i;j&lt;=n;j+=i) st[j] = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该算法的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mfrac><mi>n</mi><mn>3</mn></mfrac><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mfrac><mi>n</mi><mi>n</mi></mfrac><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>ln</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{n}{2}+\frac{n}{3}+...+\frac{n}{n} = O(n\ln{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">n</span></span><span class="mclose">)</span></span></span></span></p><p>稍微优化一下，即可进阶为埃拉斯托尼的筛子</p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301172052050.png" alt="思路" /></p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301172053862.png" alt="过程+效果" /></p><p>在朴素筛法的过程中，我们遍历了每一个数，是否有这个必要呢？答案是否定的，显然我们只需要排除质数的倍数就可以了</p><p>这种做法的理论依据在于：考虑上面的<a href="#%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0">分解质因数</a>中所提到的唯一分解定律，我们可以知道任何一个合数都可以用比他小的质数表示出来，那么我们在标记所有质数的倍数的时候，一定能把所有合数及其倍数剔除出去，因此在朴素筛法之后，我们可以通过只枚举质数的倍数来减小时间复杂度，且这个复杂度是可以计算出来的：</p><p>引入数论中<a href="https://baike.baidu.com/item/%E7%B4%A0%E6%95%B0%E5%AE%9A%E7%90%86/1972457">质数定律</a>就能发现，素数定理可以给出一个从整数中抽取到素数的概率，即从不大于n的自然数中随机选一个，他是素数的概率是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mi>ln</mi><mo>⁡</mo><mi>n</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\ln{n}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">l</span><span class="mtight">n</span></span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，根据这个概率，我们的时间复杂度可以优化为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log{\log{n}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span class="mclose">)</span></span></span></span>。</p><p>优化后的筛法如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span> ;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!st[i])  <span class="hljs-comment">//判断是质数之后再启动筛子</span><br>        &#123;<br>            prime[cnt++]  = i;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+i;j&lt;=n;j+=i) st[j] = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>事实上，比起埃拉斯托尼的筛法，依然有更优的做法，即线性筛法，经科学计算，若n的数据范围为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>，线性筛与埃氏筛效率基本持平，当n的数据范围为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">10^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span>的时候，线性筛比埃氏筛快大概一倍。</p><p>线性筛的优化在于，虽然埃氏筛已经减少了许多合数的重复标记，但是还是会重复标记一个合数，因为一个合数可能同时是多个质数的倍数，例如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn><mo>=</mo><mn>3</mn><mo>×</mo><mn>2</mn><mo>=</mo><mn>2</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">6 = 3\times2 = 2\times3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span><br />因此线性筛的核心优化就是避免将一个合数标记多次，从而达到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的时间复杂度，具体来说就是保证每个<code>n</code>只会被其最小质因子筛掉，具体代码如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!st[i]) primes[cnt++] = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;primes[j]&lt;=n/i;j++)<br>        &#123;<br>            st[primes[j]*i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(i%primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="代码踩坑"><a class="markdownIt-Anchor" href="#代码踩坑"></a> 代码踩坑</h6><ol><li><code>if (i % primes[j] == 0) break;</code>这句代码中，<code>primes[j]</code>一定是<code>i</code>的最小质因子，因为<code>i</code>是一个合数，并且之前已经被<code>primes[j]</code>筛过了，因此不需要使用<code>i</code>去筛任何数，直接跳出循环即可</li><li>为什么终止条件可以写成<code>j&lt;=n/j</code>,而不需要加上<code>j&lt;=cnt</code>?因为无论i是质数还是合数都能满足break的条件。</li></ol><h4 id="约数"><a class="markdownIt-Anchor" href="#约数"></a> 约数</h4><h5 id="试除法-2"><a class="markdownIt-Anchor" href="#试除法-2"></a> 试除法</h5><p>约数，又称因数。整数<code>a</code>除以整数<code>b(b≠0)</code>除得的商正好是整数而没有余数，我们就说<code>a</code>能被<code>b</code>整除，或<code>b</code>能整除<code>a</code>。<code>a</code>称为<code>b</code>的倍数<code>，b</code>称为<code>a</code>的约数。<br />本质上与试除法求质数类似，时间复杂度也为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，代码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">vector&lt;<span class="hljs-built_in">int</span>&gt; get<span class="hljs-constructor">_divisors(<span class="hljs-params">int</span> <span class="hljs-params">n</span>)</span><br>&#123;<br>    vector&lt;<span class="hljs-built_in">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;i&lt;=n/i;i++)<br>        <span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>)<br>        &#123;<br>            res.push<span class="hljs-constructor">_back(<span class="hljs-params">i</span>)</span>;<br>            <span class="hljs-keyword">if</span>(i!=n/i) res.push<span class="hljs-constructor">_back(<span class="hljs-params">n</span><span class="hljs-operator">/</span><span class="hljs-params">i</span>)</span>;<br>        &#125;<br>    sort(res.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>,res.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>);<br>    return res;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="约数个数"><a class="markdownIt-Anchor" href="#约数个数"></a> 约数个数</h5><p>给定<code>n</code>个正整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，请你输出这些数的乘积的约数个数，答案对<code>10e9+7</code>取模。</p><p>同样回忆<a href="#%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0">分解质因数</a>部分的唯一分解定理，我们可以把任何一个自然数<code>N</code>分为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>α</mi><mn>1</mn></msub></msubsup><mo>⋅</mo><msubsup><mi>p</mi><mn>2</mn><msub><mi>α</mi><mn>2</mn></msub></msubsup><mo>⋅</mo><msubsup><mi>p</mi><mn>3</mn><msub><mi>α</mi><mn>3</mn></msub></msubsup><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msubsup><mi>p</mi><mi>k</mi><msub><mi>α</mi><mi>k</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">N = p_1^{\alpha_1} \cdot p_2^{\alpha_2} \cdot p_3^{\alpha_3}... p_k^{\alpha_k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.0037em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0126em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.0037em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0533599999999999em;vertical-align:-0.3013079999999999em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.0037em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7520519999999999em;"><span style="top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.1506600000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.0037em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3013079999999999em;"><span></span></span></span></span></span></span></span></span></span></p><p>那么对于<code>N</code>的任何一个约数<code>d</code>，<code>d</code>也一定能按照类似规则划分为：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>β</mi><mn>1</mn></msub></msubsup><mo>⋅</mo><msubsup><mi>p</mi><mn>2</mn><msub><mi>β</mi><mn>2</mn></msub></msubsup><mo>⋅</mo><msubsup><mi>p</mi><mn>3</mn><msub><mi>β</mi><mn>3</mn></msub></msubsup><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msubsup><mi>p</mi><mi>k</mi><msub><mi>β</mi><mi>k</mi></msub></msubsup><mo separator="true">;</mo><mo stretchy="false">(</mo><mn>0</mn><mo>≤</mo><msub><mi>β</mi><mi>i</mi></msub><mo>≤</mo><msub><mi>α</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d = p_1^{\beta_1} \cdot p_2^{\beta_2} \cdot p_3^{\beta_3} ... p_k^{\beta_k};(0 \leq \beta_i \leq \alpha_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2333239999999999em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2333239999999999em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2683239999999998em;vertical-align:-0.3013079999999999em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9670159999999999em;"><span style="top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3013079999999999em;"><span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>由此可见，<code>n</code>有多少个约数<code>d</code>即对应了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\beta_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在范围内有多少种选法，易知共有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>α</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>α</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>α</mi><mn>3</mn></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><msub><mi>α</mi><mi>k</mi></msub><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\alpha_1+1)(\alpha_2+1)(\alpha_3+1)...(\alpha_k+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>中选法，这也恰好是约数的个数。</p><p>综上所述，代码在分解质因数基础上变形即可，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; primes; <br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-type">int</span> x;<br>        cin &gt;&gt; x;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;=x/i;i++)<br>            <span class="hljs-keyword">while</span>(x%i==<span class="hljs-number">0</span>)<br>            &#123;<br>                x/=i;<br>                primes[i]++;  <span class="hljs-comment">//i这个质因子的指数+1</span><br>            &#125;<br>        <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">1</span>) primes[x] ++;<br>    &#125;<br><br>    LL res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> prime:primes) <br>        res = res * (prime.second+<span class="hljs-number">1</span>)%mod;<br>    cout &lt;&lt; res &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="约数之和"><a class="markdownIt-Anchor" href="#约数之和"></a> 约数之和</h5><p>与<a href="#%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0">约数个数</a>同理，约数之和可以通过数学方法推出公式：<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo>=</mo><mo stretchy="false">(</mo><msubsup><mi>p</mi><mn>1</mn><mn>0</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mn>1</mn><mn>1</mn></msubsup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msubsup><mi>p</mi><mn>1</mn><msub><mi>α</mi><mn>1</mn></msub></msubsup><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><msubsup><mi>p</mi><mi>k</mi><mn>0</mn></msubsup><mo>+</mo><msubsup><mi>p</mi><mi>k</mi><mn>1</mn></msubsup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msubsup><mi>p</mi><mi>k</mi><msub><mi>α</mi><mi>k</mi></msub></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Sum = (p_1^0+p_1^1+...+p_1^{\alpha_1})...(p_k^0+p_k^1+...+p_k^{\alpha_k})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.097216em;vertical-align:-0.2831079999999999em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.746292em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.0037em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.097216em;vertical-align:-0.2831079999999999em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0533599999999999em;vertical-align:-0.3013079999999999em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7520519999999999em;"><span style="top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.1506600000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.0037em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3013079999999999em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br />用分配律拆开就和<a href="#%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0">约数个数</a>得出的结论一模一样，每个约数对应一种选法，因此代码也只需修改一小部分：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs excel">for(auto pri<span class="hljs-symbol">me:pr</span>imes) <br>&#123;<br>    <span class="hljs-built_in">int</span> p = prime.first;<br>    <span class="hljs-built_in">int</span> a = prime.second;<br>    LL <span class="hljs-built_in">t</span> = <span class="hljs-number">1</span>;<br>    while(a--) <br>        <span class="hljs-built_in">t</span> = (<span class="hljs-built_in">t</span> * p + <span class="hljs-number">1</span>) % <span class="hljs-built_in">mod</span>;  //古人的智慧，循环到最后恰好就是所求<br>    res = res * <span class="hljs-built_in">t</span> % <span class="hljs-built_in">mod</span>;<br>&#125;<br>cout &lt;&lt; res &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h5 id="最大公约数"><a class="markdownIt-Anchor" href="#最大公约数"></a> 最大公约数</h5><p>给定<code>n</code>对正整数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i,b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，请你求出每对数的最大公约数</p><p>著名的欧几里得算法（辗转相除法）求最大公约数，其核心原理是，如果<code>d</code>整除<code>a</code>，也整除<code>b</code>,那么<code>d</code>就整除<code>ax+by</code>。<br />所以核心的算法逻辑其实很简单，就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">gcd(a,b) = gcd(b,a\: mod\: b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span> 递归运行即可。那么这个结论是怎么得到的呢？<br />我们知道<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>b</mi><mo>=</mo><mi>a</mi><mo>−</mo><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo>⋅</mo><mi>b</mi><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">a\:mod\:b = a - \lfloor \frac{a}{b}\cdot b \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">⌋</span></span></span></span>也可以简写成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>b</mi><mo>=</mo><mi>a</mi><mo>−</mo><mi>c</mi><mo>⋅</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a\:mod\:b = a-c\cdot b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span>，也即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mo>−</mo><mi>c</mi><mo>⋅</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">gcd(a,b) = gcd(b,a-c\cdot b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">c</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span> ，而这恰好就是欧几里得算法的核心原理。因此代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">int gcd(int <span class="hljs-selector-tag">a</span>,int <span class="hljs-selector-tag">b</span>)<br>&#123;<br>    return <span class="hljs-selector-tag">b</span> ? gcd(<span class="hljs-selector-tag">b</span>,<span class="hljs-selector-tag">a</span>%<span class="hljs-selector-tag">b</span>):a;  //递归一行搞定<br>&#125;<br><br>int <span class="hljs-selector-tag">main</span>()<br>&#123;<br>    int n;<br>    cin &gt;&gt; n;<br>    while(n--)<br>    &#123;<br>        int <span class="hljs-selector-tag">a</span>,<span class="hljs-selector-tag">b</span>;<br>        cin &gt;&gt; <span class="hljs-selector-tag">a</span> &gt;&gt; <span class="hljs-selector-tag">b</span>;<br>        cout &lt;&lt; gcd(<span class="hljs-selector-tag">a</span>,<span class="hljs-selector-tag">b</span>) &lt;&lt; endl;<br>    &#125;<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法、数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>算法</tag>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工作总结</title>
    <link href="/2023/01/20/%E7%9F%B3%E5%A2%A8%E6%97%A5%E8%AE%B0/"/>
    <url>/2023/01/20/%E7%9F%B3%E5%A2%A8%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>本文仅用以记录自2023年1月12日之后的每日工作</strong></p><h2 id="112-工作总结"><a class="markdownIt-Anchor" href="#112-工作总结"></a> 1.12 工作总结</h2><h4 id="机试准备"><a class="markdownIt-Anchor" href="#机试准备"></a> 机试准备</h4><p>打卡AcWing动态规划最后一部分题目</p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301141054063.png" alt="题目打卡" /></p><p>补全博客动态规划部分最后一篇<a href="https://lzyq0912.github.io/2023/01/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-3/">内容</a></p><blockquote><p>权作引玉之砖，报名AcWing算法基础课的同学可以看看当作参考、题解</p></blockquote><h4 id="英语学习"><a class="markdownIt-Anchor" href="#英语学习"></a> 英语学习</h4><ol><li>看youtube博主<a href="https://www.youtube.com/@ST_English">ST今日英语</a></li><li>在low end talk与歪果仁撕逼</li></ol><h4 id="摆"><a class="markdownIt-Anchor" href="#摆"></a> 摆</h4><p><s>玩真人快打。。。玩双人成行。。。</s></p><h2 id="115-工作总结"><a class="markdownIt-Anchor" href="#115-工作总结"></a> 1.15 工作总结</h2><h4 id="机试准备-2"><a class="markdownIt-Anchor" href="#机试准备-2"></a> 机试准备</h4><p>打卡AcWing贪心部分题目（其实只写了3道，简称部分），个人感觉贪心比动态规划更容易写，更难证明；如果只求做题，可以靠刷题量找到感觉，遇到类似问题无脑贪心即可，追求效率的话，可以不学习证明，所以懒得写博客了。<s>感觉写了对这部分的学习似乎也没啥帮助233</s></p><h4 id="投其所好"><a class="markdownIt-Anchor" href="#投其所好"></a> 投其所好</h4><p>考虑到之前毕设做的机器学习相关，但是对很多基础知识都不了解，只是学了个应用，为了复试时候有话说，开坑<a href="https://github.com/Kivy-CN/Stanford-CS-229-CN">公开课CS229</a></p><h4 id="英语学习-2"><a class="markdownIt-Anchor" href="#英语学习-2"></a> 英语学习</h4><p>看了几条之前经验贴的常见问题，试着写了几个英语回答，但是效果不好，目前不清楚会不会考英语文献阅读，对相当部分的专业词汇也欠缺了解，找了篇当时毕设的某篇英文<a href="https://www.proquest.com/openview/83dec6f14099623f54d53efd23372125/1?pq-origsite=gscholar&amp;cbl=2049588">参考文献</a>来看，进度到abstract</p><h4 id="摆-2"><a class="markdownIt-Anchor" href="#摆-2"></a> 摆</h4><p><s>下午看阿凡达去了</s></p><h2 id="116-工作总结"><a class="markdownIt-Anchor" href="#116-工作总结"></a> 1.16 工作总结</h2><h4 id="机试准备-3"><a class="markdownIt-Anchor" href="#机试准备-3"></a> 机试准备</h4><p>贪心完结撒花，至此算法基础课除了数论完全没看和部分练习题，其他的已经过了一遍，但是回忆的过程中发现前面很多模板题已经忘了怎么写，甚至锻炼过好几遍的整数二分，快速划分之类的也要思考一段时间才能写出来，预计要花一段时间复习一下了。</p><p>本质上不想看数论是一种偷懒行为，只是因为不想走出舒适区，不想去接收某些数学的新知识。实际上数论甚至会是机试的重点。。。所以还是不想看，以后再说吧</p><p>博学而笃志，切问而近思，仁在其中矣</p><h4 id="投其所好-2"><a class="markdownIt-Anchor" href="#投其所好-2"></a> 投其所好</h4><p>继续看<a href="https://github.com/Kivy-CN/Stanford-CS-229-CN">CS229</a>，回顾了一下之前毕设黄金正弦算法部分的实现，自己写的东西自己都不记得，简直离谱。</p><h4 id="英语学习-3"><a class="markdownIt-Anchor" href="#英语学习-3"></a> 英语学习</h4><p>看<a href="https://www.youtube.com/@ST_English">ST今日英语</a>，继续看<a href="https://www.proquest.com/openview/83dec6f14099623f54d53efd23372125/1?pq-origsite=gscholar&amp;cbl=2049588">论文</a>。</p><h4 id="摆-3"><a class="markdownIt-Anchor" href="#摆-3"></a> 摆</h4><p><s>真人快打小打两把，半个小时左右，比之前有进步；看了两篇毛选</s></p><h2 id="117-工作总结"><a class="markdownIt-Anchor" href="#117-工作总结"></a> 1.17 工作总结</h2><h4 id="机试准备-4"><a class="markdownIt-Anchor" href="#机试准备-4"></a> 机试准备</h4><p>质数，约数部分AcWing打卡，目前为止没有想象的难，也可能是y总讲的比较好</p><h4 id="投其所好-3"><a class="markdownIt-Anchor" href="#投其所好-3"></a> 投其所好</h4><p>今天心态有点不好，不想投其所好了，CS229一秒钟都没看，看之前总结里Dragon兄看了某本叫isl的书，搜索引擎了解了一下，觉得不错，但是感觉自己不太适合啃书的学习模式，反而比较喜欢Do For Learn，由于毕设做的就是决策树相关，所以不太会去深挖神经网络的内容了，如果有对<a href="https://github.com/microsoft/LightGBM">lightgbm</a>感兴趣的同学，可以联系我，一起做调参侠</p><p>总结的意义可能就在这里，每人记录的自认为平常的内容，都可能扩展了获取知识的途径。吾生也有涯，而知也无涯，浩如烟海的知识里每个人都可能掌握了别人不知道的信息，衷心希望各位总结的时候能尽可能精确一下学习内容，我也会坚持在我提到的新内容里插入链接，方便各位访问。</p><h4 id="英语学习-4"><a class="markdownIt-Anchor" href="#英语学习-4"></a> 英语学习</h4><p><a href="https://www.youtube.com/@ST_English">ST今日英语</a>，感觉口语进步较少，但是听力大幅提高，目前已经可以无字幕看大部分youtube发音标准的英文视频了，不过在复试中听力有什么卵用吗？似乎没有</p><h4 id="摆-4"><a class="markdownIt-Anchor" href="#摆-4"></a> 摆</h4><p>摆是一种心态，今天一整天都在摆</p><h2 id="119工作总结"><a class="markdownIt-Anchor" href="#119工作总结"></a> 1.19工作总结</h2><h4 id="机试准备-5"><a class="markdownIt-Anchor" href="#机试准备-5"></a> 机试准备</h4><p>思考了一下还是给数论部分写个博客，方便之后回顾，毕竟思考类的东西还是有必要整理一下的</p><h4 id="杂务"><a class="markdownIt-Anchor" href="#杂务"></a> 杂务</h4><p>搞了个chat_gpt机器人，本来想扔群里，结果自己还没测试几次就冻结了，腾讯也是搞笑</p><h4 id="投其所好-4"><a class="markdownIt-Anchor" href="#投其所好-4"></a> 投其所好</h4><p>看了CS229</p><h4 id="摆-5"><a class="markdownIt-Anchor" href="#摆-5"></a> 摆</h4><p>年关将至，确实很多杂务，昨天心态不好，感觉这些东西都在占用自己的时间，一边不想帮家里做这些事情，一边心里看着父母在做自己坐着不动又会愧疚，今天想开了许多。就当给自己放个假吧，明天买点牛肉回来卤，希望不要翻车。<br />毕竟“悦亲戚之情话，乐琴书以消忧”之后，才有“木欣欣以向荣，泉涓涓而始流”，祝各位，新年快乐!</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>总结</tag>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划-3</title>
    <link href="/2023/01/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-3/"/>
    <url>/2023/01/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-3/</url>
    
    <content type="html"><![CDATA[<h2 align = "center">动态规划-第三部分</h2><h3 id="计数类dp"><a class="markdownIt-Anchor" href="#计数类dp"></a> 计数类DP</h3><h4 id="整数划分"><a class="markdownIt-Anchor" href="#整数划分"></a> 整数划分</h4><p>将一个正整数划分为若干个正整数的和，且这些正整数从大到小排列，例如5 = 4 + 1；现在求对于给定的正整数<code>n</code>有多少种表示方式。</p><p>首先还是分析集合，集合的属性和如何划分。我们观察，本题与完全背包问题一一对应，每种划分的某个数字的个数就对应了完全背包问题中某种物品选几个，因此我们回忆完全背包的状态表示和状态计算，<code>f[i][j]</code>代表的是所有从<code>1~i</code>中选并且体积是<code>j</code>的选法的数量。对应的划分是以第<code>i</code>个物品选几个来划分的，即<code>f[i][j] = f[i-1][j-v[i]*k]+w[i]*k</code>，我们发现本题中对应整数划分来说，每种物品的价值均等，体积相同，因此可以省去<code>w[i]</code>这个参数，即<code>f[i][j] = f[i-1][j-k*i]; k = 1,2,...,s;其中s*k&lt;=j</code></p><p>与完全背包问题相同，这种写法时间复杂度超高，我们需要对其进行优化，同样的，观察将<code>f[i][j]</code>和<code>f[i][j-i]</code>分别展开，发现如下的关系</p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301091855187.png" alt="推导关系" /></p><p>因此<code>f[i][j] = f[i-1][j] + f[i][j-i];</code><br />一维优化过程与完全背包问题也完全相同，因此代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span><br>&#123;<br>    cin &gt;&gt; n;<br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;  <span class="hljs-comment">//一个数都不分，选法自然为1</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j = i;j&lt;=n;j++)<br>            f[j] = (f[j] + f[j-i])%mod; <span class="hljs-comment">//结果可能过大，按照题意取模输出</span><br>    cout &lt;&lt; f[n] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="其他解法"><a class="markdownIt-Anchor" href="#其他解法"></a> 其他解法</h5><p>实际上，动态规划问题并不一定只有一种解法，只要状态表示恰当，分类不遗漏，对应的状态转移方程均可解题，本题中的状态表示也可以采用如下的解释：<code>f[i][j]</code>表示所有总和是<code>i</code>，且恰好划分为<code>j</code>个数的划分方式的集合，集合的属性即划分方式的数量。</p><p>这种状态表示的代价是，划分方法较为抽象。</p><p>我们可以将集合划分为：所有划分方式中<strong>含有数字1</strong>的与<strong>不含有数字1</strong>的两类，那么对于包含数字1的情况，对应的划分方式是：所有总和是<code>i-1</code>，且用<code>j-1</code>个数来划分。这种情况实际对应的表示是<code>f[i-1][j-1]</code>；所有不包含数字1的情况，实际就表示，总和为<code>i</code>，用<code>j</code>个严格大于1的数表示的划分方法；这种划分显然无法直接表示出来，然而，由于划分出来的每个数的值都严格大于1，因此假设我们将每个数都减去1，他们依旧满足题设<strong>正整数</strong>的条件，只是总和变为了<code>i-j</code>，因此，这种情况实际上可以表示为<code>f[i-j][j]</code>，至此，我们的划分方式表示完毕，状态转移方程如下：<br /><code>f[i][j] = f[i-1][j-1] + f[i-j][j];</code><br />应该注意到，题目中所求答案与状态表示的集合并不相同，因此最终的结果应该为<br /><code>ans = f[n][1] + f[n][2] + ... + f[n][n];</code><br />即划分为1个数，2个数直至n个数的所有划分方案的总和，那么本题核心代码如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs prolog">int main()<br>&#123;<br>    cin &gt;&gt; n;<br>    f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; //总和为<span class="hljs-number">0</span>的情况下，用<span class="hljs-number">0</span>个数来表示的方案数是<span class="hljs-number">1</span><br>    for(int i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        for(int j = <span class="hljs-number">1</span>;j&lt;=i;j++)<br>            f[i][j] = (f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + f[i-j][j]) <span class="hljs-comment">% M;  </span><br>    <br>    int res = <span class="hljs-number">0</span>;<br>    for(int i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        res = (res + f[n][i]) <span class="hljs-comment">% M;  //要记得按照题意取模</span><br>    cout &lt;&lt; res &lt;&lt; endl;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数位统计dp"><a class="markdownIt-Anchor" href="#数位统计dp"></a> 数位统计DP</h3><p>数位统计DP的核心问题是分情况讨论，并且要注意每种情况的边界处理，此类问题一般究极无敌<strong>恶心</strong></p><h4 id="计数问题"><a class="markdownIt-Anchor" href="#计数问题"></a> 计数问题</h4><p>给定两个整数<code>a</code>和<code>b</code>，求两者之间所有数字中<code>0~9</code>的出现次数，例如<code>11~19</code>之间1出现了9次，8出现了1次。</p><p>设<code>count(n,x)</code>代表<code>1~n</code>中<code>x</code>出现的次数，那么<code>count(b,x)</code>代表<code>1~b</code>之间<code>x</code>出现的次数，<code>count(a-1,x)</code>代表<code>1~a-1</code>之间<code>x</code>出现的次数；我们显然可以利用<strong>前缀和</strong>思想，利用<code>count(b,x) - count(a-1,x)</code>求出最终结果，那么现在注意力可以聚焦到：如何求出一个函数<code>count</code>，实现可以计算出<code>1~n</code>之间所有<code>x</code>出现的个数。</p><p>现在，对于某个数<code>n</code>形如<code>abcdefg</code>，<code>count</code>需要求出<code>x</code>在该数每一位出现的次数，设我们求出在对应<code>d</code>的数位上出现的次数，即求出在<code>1~n</code>之间有多少形如<code>mmmxnnn</code>这样的数，其中<code>m,n</code>可为任意自然数，假设<code>x &gt; 0</code>那么有如下的几种情况：</p><ol><li><code>mmm</code>的范围是<code>000~abc-1</code>时,对应的<code>d</code>位取<code>x</code>，之后的<code>efg</code>范围为<code>0~999</code>，这种情况共有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>b</mi><mi>c</mi><mo>∗</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">abc*100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">b</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>种</li><li><code>mmm = abc</code>时，对应的<code>d</code>位取<code>x</code>，此时视原数<code>n</code>中<code>d</code>的值又有以下几种情况：<ol><li><code>n</code>中<code>d &lt; x</code>，那么显然这种情况<code>0~n</code>之间满足条件的数有0个</li><li><code>n</code>中<code>d = x</code>，那么此时只需要求选出的数对应<code>efg</code>位比原数中小即可，共有<code>efg - 1</code>种情况</li><li><code>n</code>中<code>d &gt; x</code>，那么末尾三位可以取<code>000~999</code>，共1000种取法。<br />假设<code>x = 0</code>呢，是否依旧能套用上面的分类结果？</li></ol></li></ol><p>事实上，看似我们的枚举已经很完善了，但是仔细思考会发现，忽视了<code>x = 0</code>时重要的边界问题，即第一种情况下数字的前导0问题，形如<code>000123</code>的数显然在自然界中不存在，然而我们的枚举囊括了此类情况，因此需要对其进行排除，对于“前导0”的形容，可能有些令人费解，实际上在本题中，假如第<em>k</em>位为 0，并且它的前面是全0，那么就相当于第<em>k</em>位并不存在，也就不能算是一个方案数。<br />例如，要在<code>abcdefg</code>中找第4位为0的数。<br />假如<code>abc</code>为000，<code>d</code>也为0，那么就会有<code>0000efg</code>。但是，<code>0000efg</code>实际上就是<code>efg</code>，它并不存在第四位，因此也就不能算是第4位为0的数。不应存在于我们的分类之内。</p><p>因此对应于<code>x = 0</code>的情况，我们应该将上文分类1中枚举<code>mmm</code>的范围变成<code>001-abc - 1</code>，此时分类结果正确，且同时我们要注意，x取0的时候绝不可能在第一位，否则数字也不合法， 因此<code>x = 0</code>时我们应该从数的第二位开始枚举得出答案，那么代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; num, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> <span class="hljs-comment">// 算出&#x27;abc&#x27;</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &gt;= r; i--)<br>        res = res * <span class="hljs-number">10</span> + num[i];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">power10</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 算出&#x27;1000&#x27;</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (x--)<br>        res *= <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">count</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 从1-n中统计x出现的次数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!n)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// n = 0时不存在</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; num;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        num.<span class="hljs-built_in">push_back</span>(n % <span class="hljs-number">10</span>);<br>        n /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    n = num.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span> - !x; i &gt;= <span class="hljs-number">0</span>; i--) <span class="hljs-comment">//! x的目的是当x = 0时从第2位开始枚举</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; n - <span class="hljs-number">1</span>) <span class="hljs-comment">// 对第一位特殊判别</span><br>        &#123;<br>            res += <span class="hljs-built_in">get</span>(num, n - <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>) * <span class="hljs-built_in">power10</span>(i); <span class="hljs-comment">// 获取i前面所有位，对应情况1</span><br>            <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>)<br>                res -= <span class="hljs-built_in">power10</span>(i); <span class="hljs-comment">// 刨除x = 0对应的1*1000中情况</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (num[i] == x)<br>            res += <span class="hljs-built_in">get</span>(num, i - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>; <span class="hljs-comment">// 对应情况2.2</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num[i] &gt; x)<br>            res += <span class="hljs-built_in">power10</span>(i); <span class="hljs-comment">// 对应情况2.3</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b, a || b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a &gt; b)<br>            <span class="hljs-built_in">swap</span>(a, b);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>            cout &lt;&lt; <span class="hljs-built_in">count</span>(b, i) - <span class="hljs-built_in">count</span>(a - <span class="hljs-number">1</span>, i) &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="状态压缩dp"><a class="markdownIt-Anchor" href="#状态压缩dp"></a> 状态压缩DP</h3><p>状态压缩就是使用某种方法，简明扼要的以最小代价来表示某种状态，通常用一串01数字（二进制数）来表示各个点的状态，也因此要求使用状态压缩DP的条件是单体对象被标示的状态只有两种，从而可以用0或者1来表示。</p><h5 id="使用条件"><a class="markdownIt-Anchor" href="#使用条件"></a> 使用条件</h5><p>解法需要保存一定的状态数据（表示一种状态的一个数据值），每个状态数据通常情况下是可以通过2进制来表示的。这就要求状态数据的每个单元只有两种状态，比如说棋盘上的格子，放棋子或者不放，或者是硬币的正反两面。这样用0或者1来表示状态数据的每个单元，而整个状态数据就是一个由一串0和1组成的二进制数。</p><p>解法需要将状态数据实现为一个基本数据类型，比如int，long等等，即所谓的状态压缩。状态压缩的目的一方面是缩小了数据存储的空间，另一方面是在状态对比和状态整体处理时能够提高效率。这样就要求状态数据中的单元个数不能太大，比如用int来表示一个状态的时候，状态的单元个数不能超过32（32位的机器），所以题目一般都是至少有一维的数据范围很小。</p><h5 id="常用操作"><a class="markdownIt-Anchor" href="#常用操作"></a> 常用操作</h5><ol><li>判断一个数字<code>x</code>在二进制下的第<code>i</code>位是不是等于1。<br />方法：<code>if ( ((1&lt;&lt;(i−1)) &amp; x) &gt; 0)</code></li></ol><blockquote><p>将1左移i-1位，相当于制造了一个只有第i位上是1，其他位上都是0的二进制数。然后与x做与运算，如果结果&gt;0，说明x第i位上是1，反之则是0。</p></blockquote><ol start="2"><li>将一个数字<code>x</code>在二进制下的第<code>i</code>位更改成1。<br />方法：<code>x = x | ( 1&lt;&lt;(i−1) )</code></li><li>把一个数字二进制下最靠右的第一个1去掉。<br />方法：<code>x = x &amp; (x−1)</code></li></ol><blockquote><p>优先级： 位反（~) &gt; 算术 &gt; 位左移、位右移 &gt; 关系运算 &gt; 位与 &gt; 位或 &gt; 位异或 &gt; 逻辑运算</p></blockquote><h4 id="蒙德里安的梦想"><a class="markdownIt-Anchor" href="#蒙德里安的梦想"></a> 蒙德里安的梦想</h4><p>给定一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>∗</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n*m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>个单位的大方块，要求将大方块划分成小方块，小方块均为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>∗</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2*1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 大小，求有多少种划分方案，例如<code>n = 2,m = 4</code>时有如下图所示的划分方案：</p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301120817302.png" alt="划分方案" /></p><h5 id="问题核心"><a class="markdownIt-Anchor" href="#问题核心"></a> 问题核心</h5><p>本题的数据范围为<code>1&lt;=(n,m)&lt;=11;</code>故考虑可以用状态压缩DP来做，而本体的解题核心是<strong>先分析横着放的，再分析竖着放的</strong>，从而有总方案数 = 只放横着的方块的合法方案数。判断合法与否的规则是剩余位置能否填充满竖着的方块。而方块竖着的情况占据一个列单位，两个行单位，故只需判别大方块空余列内单位内的连续行单位数目为<strong>偶数个</strong>即可。</p><h5 id="解题方案"><a class="markdownIt-Anchor" href="#解题方案"></a> 解题方案</h5><p>采用动态规划的解题方案，首先还是确定集合表示，本题中<code>f[i][j]</code>可以表示为：已经将前<code>i-1</code>列方块摆好，且有方块跨越第<code>i-1</code>列和第<code>i</code>列的所有状态为<code>j</code>的方案的集合。<br />这种表述方式似乎令人费解，不过下图可以更好的说明集合是如何表示的。</p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301120833074.png" alt="状态表示" /></p><p>上图虽然方案不合法，但是已足够说明我们的表示规则：<code>j</code>在状态压缩DP中作为一个二进制字符串表示对应状态存在与否，于是，对于上图中的状态来说，<code>i = 2,j = 11001;</code><br />接下来我们只需进行状态划分即可，按照惯例，根据最后一步所做的不固定的操作来对集合进行划分。</p><p>考察本题，<code>f[i][j]</code>已经表示了跨越第<code>i-1</code>列和第<code>i</code>列的状态集合，那么此时对于f[i][j]来说跨越第<code>i-1</code>列和第<code>i</code>列的方块是固定的，不固定的是上一步跨越<code>i-2</code>列到<code>i-1</code>列方块的状态，我们对此进行分类讨论：</p><p>对于<code>i-2</code>到<code>i-1</code>列，共有<code>n</code>行，故状态数目共有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>种，即状态压缩为01串的长度为<code>n</code>，设某个状态为<code>k</code>，则对应的状态表示应为<code>f[i-1][k]</code>，需要满足条件如下:</p><ol><li>跨越<code>i-2</code>和<code>i-1</code>的方块不能与已经固定的跨越<code>i-1</code>到<code>i</code>的方块重叠，抽象到二进制串即为<code>(j&amp;k) == 0</code></li><li>回顾我们在<a href="#%E9%97%AE%E9%A2%98%E6%A0%B8%E5%BF%83">问题核心</a>分析的合法方案，要求必须有该列连续空着的区间长度为<strong>偶数</strong></li></ol><p>因此，最后的状态转移方程可以表示为：<code>f[i][j] = f[i-1][k],且k满足合法条件</code><br />最终的结果应与状态表示方式对应为<code>f[m][0]</code>，代表着已经将<code>m-1</code>列方块之前均摆好，且跨越第<code>m-1</code>列到第<code>m</code>列的状态为0，即不超出题目中给出的n行m列方块。<br />那么本题代码应如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">12</span>, M = <span class="hljs-number">1</span>&lt;&lt;N;  <span class="hljs-comment">//M用状态压缩表示</span><br><span class="hljs-type">int</span> n,m;<br>LL f[N][M];<br>vector&lt;<span class="hljs-type">int</span>&gt; state[M];  <span class="hljs-comment">//存储所有的合法状态</span><br><span class="hljs-type">bool</span> st[N];  <span class="hljs-comment">//用以判断某个状态是否合法即每个状态中连续的0是否有偶数个</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; n &gt;&gt; m,n||m)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1</span>&lt;&lt;n;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;  <span class="hljs-comment">//表示每个状态中0的个数</span><br>            <span class="hljs-type">bool</span> is_val = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j&lt;n;j++)<br>                <span class="hljs-keyword">if</span>(i&gt;&gt;j &amp; <span class="hljs-number">1</span>)  <span class="hljs-comment">//找每个状态中所有连续的0是否有偶数个</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span>(cnt&amp;<span class="hljs-number">1</span>)<br>                    &#123;<br>                        is_val = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    cnt = <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> cnt ++;<br>            <span class="hljs-keyword">if</span>(cnt &amp; <span class="hljs-number">1</span>) is_val = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//不能忘记判断最后一列</span><br>            st[i] = is_val;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1</span>&lt;&lt;n;i++)  <span class="hljs-comment">//初始化合法状态</span><br>        &#123;<br>            state[i].<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j&lt;<span class="hljs-number">1</span>&lt;&lt;n;j++)<br>                <span class="hljs-keyword">if</span>((i&amp;j) == <span class="hljs-number">0</span> &amp;&amp; st[i|j])  <span class="hljs-comment">//满足条件1和条件2</span><br>                    state[i].<span class="hljs-built_in">push_back</span>(j);<br>        &#125;<br><br>        <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> f);<br>        f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j&lt;<span class="hljs-number">1</span>&lt;&lt;n;j++)<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> k:state[j])<br>                    f[i][j] += f[i<span class="hljs-number">-1</span>][k];<br>        cout &lt;&lt; f[m][<span class="hljs-number">0</span>] &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="代码踩坑"><a class="markdownIt-Anchor" href="#代码踩坑"></a> 代码踩坑</h5><p>注意代码中的两个特殊点，感谢<code>AcWing @chosen1pm</code>同学的<a href="https://www.acwing.com/solution/content/69825/">题解</a></p><ol><li><code>(j&amp;k)</code>代表<code>j</code>状态与<code>k</code>状态不能在同一行，否则冲突</li><li>不存在连续奇数个空位，用计数器<code>cnt</code>判断，这里最后还要加一次额外的<code>if(cnt&amp;1)</code>判断的原因是代码中进入判断时为<code>(i&gt;&gt;j&amp;1)</code><br />即遍历状态串遇到1时才会进入判断，如果最后出现的1后面还有连续奇数个0一样是非法状态，因此我们需要在循环最后额外添加一个判断</li><li><code>st[i|j]</code>是个什么勾巴东西，目的是为了同时判断<code>j</code>状态和<code>k</code>状态的状态是否合法，如下图引用<code>@chosen1pm</code>同学所示</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301121014461.png" alt="st[i|j]" /></p><p>那么就到此为止吧，<s>蒙德里安再也不要做梦了</s></p><h4 id="最短hamilton路径"><a class="markdownIt-Anchor" href="#最短hamilton路径"></a> 最短Hamilton路径</h4><p>一张图有<code>n</code>个点，每个边有权值，对这些点从0到n-1编号，求起点0到终点<code>n-1</code>的最短汉密尔顿路径，汉密尔顿路径的定义是不重不漏经过图中每个点恰好一次。</p><p>这类问题因为状态过多，所以需要进行状态压缩，否则将会超时，首先我们还是找集合，本题中的<code>f[i][j]</code>代表的是所有从0开始走到<code>j</code>，走过的所有点个数是<code>i</code>的所有路径。那么我们可以用这样的01串来表示对应的状态，例如<code>1110011</code>，就对应一条路径，即经过了第0，1，4，5，6这五个点而不经过第2，3个点的一条路径。集合的属性是路径长度的最小值。</p><p>接下来我们进行状态划分，我们根据经过的倒数第二个点是第几个点来分类，例如经过的是第0个点，第1个点直到第<code>n-1</code>个点的<code>n</code>种情况。设倒数第二个点是<code>K</code>，那么可以把状态表示成，所有从0开始走到<code>K</code>,经过的点是<code>i-&#123;j&#125;</code>的所有路径，再加上最后的<code>k-j</code>这条边，状态转移方程如下：<br /><code>f[i][j] = f[i-&#123;j&#125;][k] + a[k][j];</code><br />对应核心代码如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">int main()<br>&#123;<br>    cin &gt;&gt; n;<br>    for(int i = <span class="hljs-number">0</span><span class="hljs-comment">;i&lt;n;i++)</span><br>        for(int <span class="hljs-keyword">j </span>= <span class="hljs-number">0</span><span class="hljs-comment">;j&lt;n;j++)</span><br>            cin &gt;&gt; w[i][<span class="hljs-keyword">j];</span><br><span class="hljs-keyword"></span>    memset(f,<span class="hljs-number">0x3f</span>,sizeof f)<span class="hljs-comment">; //初始化所有状态为正无穷</span><br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><span class="hljs-comment">; //从0开始走到0，只经过1个点，路径长度为0</span><br>    for(int i = <span class="hljs-number">0</span><span class="hljs-comment">;i&lt;1&lt;&lt;n;i++)</span><br>        for(int <span class="hljs-keyword">j </span>= <span class="hljs-number">0</span><span class="hljs-comment">;j&lt;n;j++)</span><br>            if(i&gt;&gt;<span class="hljs-keyword">j&amp;1)</span><br><span class="hljs-keyword"></span>                for(int k = <span class="hljs-number">0</span><span class="hljs-comment">;k&lt;n;k++)</span><br>                    if((i-(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-keyword">j)) </span>&gt;&gt; k &amp; <span class="hljs-number">1</span>)<br>                        f[i][<span class="hljs-keyword">j] </span>= min(f[i][<span class="hljs-keyword">j],f[i-(1&lt;&lt;j)][k] </span>+ w[k][<span class="hljs-keyword">j]);</span><br><span class="hljs-keyword"></span>    cout &lt;&lt; f[(<span class="hljs-number">1</span>&lt;&lt;n)-<span class="hljs-number">1</span>][n<span class="hljs-number">-1</span>] &lt;&lt; endl;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="树形dp"><a class="markdownIt-Anchor" href="#树形dp"></a> 树形DP</h3><h4 id="没有上司的舞会"><a class="markdownIt-Anchor" href="#没有上司的舞会"></a> 没有上司的舞会</h4><p>应用类题面，具体内容无关紧要，提炼出来题意核心：<br />给定一棵树，父节点定义为子节点的<strong>直接上司</strong>，每个节点作为一个<strong>职员</strong>，拥有一个<em>快乐指数</em>，用整数 <em>H<sub>i</em> 来表示，现举办一场宴会，要求在所有节点均不与其<strong>直接上司</strong>共同参会的前提下，求出参与宴会的节点的<em>快乐指数</em>总和最大值。</p><p>显然由题意可知，所有节点的关系为一棵树，因此符合树形DP的操作条件，进行一个跨层挑选，首先还是状态表示，树形DP的状态表示和状态压缩DP较为类似，例如<code>f[u][0]</code>代表所有从以<code>u</code>为根的子树中选择并且不选<code>u</code>节点的方案，那么<code>f[u][1]</code>就代表所有从以<code>u</code>为根的子树中选择且选<code>u</code>节点的方案。本题中集合的属性为最大值。</p><p>接下来对状态进行划分，联系到树形，因此思维走向显然是对当前节点的子节点进行分类讨论，设<code>u</code>点的左子节点为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">S_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,右子节点为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">S_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,那么根据题意，<code>f[u]</code>的两种状态可以表示如下：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mo>∑</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">[</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">[</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f[u][0] = \sum max(f[S_i][0],f[S_i][1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal">u</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>;<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mo>∑</mo><mi>f</mi><mo stretchy="false">[</mo><msub><mi>S</mi><mi>i</mi></msub><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>+</mo><msub><mi>H</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">f[u][1] = \sum f[S_i][0] + H_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal">u</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>;</p><p>那么本题代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">6010</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> happy[N];<br><span class="hljs-type">int</span> h[N],e[N],ne[N],idx;<br><span class="hljs-type">int</span> f[N][<span class="hljs-number">2</span>];<br><span class="hljs-type">bool</span> has_father[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>  <span class="hljs-comment">//加边操作</span></span><br><span class="hljs-function"></span>&#123;<br>    e[idx] = b,ne[idx] = h[a],h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    f[u][<span class="hljs-number">1</span>] = happy[u];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = h[u];i!=<span class="hljs-number">-1</span>;i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];  <span class="hljs-comment">//用j代表每个孩子</span><br>        <span class="hljs-built_in">dfs</span>(j);<br>        f[u][<span class="hljs-number">0</span>] += <span class="hljs-built_in">max</span>(f[j][<span class="hljs-number">0</span>],f[j][<span class="hljs-number">1</span>]);<br>        f[u][<span class="hljs-number">1</span>] += f[j][<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cin &gt;&gt; happy[i];<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a,b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        has_father[a] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">add</span>(b,a);<br>    &#125;<br>    <span class="hljs-type">int</span> root = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(has_father[root]) root++;  <span class="hljs-comment">//遍历所有点找到root</span><br><br>    <span class="hljs-built_in">dfs</span>(root);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">max</span>(f[root][<span class="hljs-number">0</span>],f[root][<span class="hljs-number">1</span>]));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="代码踩坑-2"><a class="markdownIt-Anchor" href="#代码踩坑-2"></a> 代码踩坑</h5><p>观察代码可以发现，事实上树形DP以动态规划思想为核心，依赖DFS作为其工具。可以说树形DP一定要借助DFS来实现状态的转移，因此提高DFS的熟练度至关重要，同时解题时的思维路径一定要明确，看到树形，要联系到父子节点之间的关系，联系到DFS上去。</p><h3 id="记忆化搜索"><a class="markdownIt-Anchor" href="#记忆化搜索"></a> 记忆化搜索</h3><p>同样是利用动态规划的思想来优化DFS问题，在通常采用DFS进行暴力搜索的过程中，一个位置的状态每次搜索完不会被保留，而动态规划的状态表示集合<code>f[i][j]</code>可以存储当前位置的状态，下次计算当前位置的状态时候就不必重复计算，用空间换了时间。</p><h4 id="滑雪"><a class="markdownIt-Anchor" href="#滑雪"></a> 滑雪</h4><p>应用型题面，抽象出题目核心表述如下：</p><p>给定一个矩阵，代表一个 <em>R</em> 行 <em>C</em> 列滑雪场，矩阵中每个元素的值代表该点的高度，某人在矩阵滑雪场中滑雪，每次只能按照上下左右四个方向任意前进一个单位，某人能在滑雪场顺利滑雪的条件是<strong>从高往低滑</strong>，经过矩阵中高度递减的位置。求出在以上条件下，该矩阵滑雪场内能完成的最长滑雪轨迹。</p><p>首先还是状态表示，本题中集合<code>f[i][j]</code>表示所有从点<code>(i,j)</code>开始滑的路径，集合的属性即路径最大值。<br />接下来是状态划分，我们可以按照滑雪的方向来进行划分，即按照上下左右四个滑雪方向来分类，那么状态计算如下：<br /><code>f[i][j] = max(f[i-1][j]+1,f[i][j-1]+1,f[i+1][j]+1,f[i][j+1]+1);</code><br />注意状态计算时四种滑雪方向并不一定满足条件，进行讨论即可。那么本题中核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">dp</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-type">int</span> &amp;v = f[x][y]; <span class="hljs-comment">// 引用之后接下来所有v代表f[x][y]</span><br>    <span class="hljs-keyword">if</span> (v != -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> v;<br><br>    v = <span class="hljs-number">1</span>; <span class="hljs-comment">// 初始状态，只走当前的格子</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> x + dx[i], b = y + dy[i];<br>        <span class="hljs-keyword">if</span> (a &gt;= <span class="hljs-number">1</span> &amp;&amp; a &lt;= n &amp;&amp; b &gt;= <span class="hljs-number">1</span> &amp;&amp; b &lt;= m &amp;&amp; h[a][b] &lt; h[x][y])<br>            v = max(v, dp(a, b) + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            cin &gt;&gt; h[i][j];<br>    memset(f, -<span class="hljs-number">1</span>, sizeof f);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            res = max(res, dp(i, j)); <span class="hljs-comment">// 求出f[i][j]状态并且返回</span><br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>记忆化搜索就是 <code>dfs</code> + 记忆化数组<code>f[i][j]</code>，在算某一个位置时把它的所有路径上 所有算过的位置状态保存在数组<code>f[i][j]</code>里。</p></blockquote><blockquote><p><code>if (f[x][y] != -1) return f[x][y];</code>,即下次求某个被算过的位置的状态时，无需重新计算，而是直接返回。是数组<code>f[i][j]</code>起到了记忆的作用。这里面也体现了空间换时间的思想。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法、DSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>算法</tag>
      
      <tag>模板题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划-2</title>
    <link href="/2023/01/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-2/"/>
    <url>/2023/01/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-2/</url>
    
    <content type="html"><![CDATA[ <h2 align = "center">线性DP-区间DP</h2><h4 id="数字三角形"><a class="markdownIt-Anchor" href="#数字三角形"></a> 数字三角形</h4><p>给定一个如下图所示的数字三角形，从顶部出发，在每一结点可以选择移动至其左下方的结点或移动至其右下方的结点，一直走到底层，要求找出一条路径，使路径上的数字的和最大。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache">        <span class="hljs-attribute">7</span><br>      <span class="hljs-attribute">3</span>   <span class="hljs-number">8</span><br>    <span class="hljs-attribute">8</span>   <span class="hljs-number">1</span>   <span class="hljs-number">0</span><br>  <span class="hljs-attribute">2</span>   <span class="hljs-number">7</span>   <span class="hljs-number">4</span>   <span class="hljs-number">4</span><br><span class="hljs-attribute">4</span>   <span class="hljs-number">5</span>   <span class="hljs-number">2</span>   <span class="hljs-number">6</span>   <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h5 id="朴素解法"><a class="markdownIt-Anchor" href="#朴素解法"></a> 朴素解法</h5><p>看过之前的背包问题的话，我们很容易把握问题的本质，就是要找出集合和集合的属性，以及如何划分，我们将数字三角形堆砌起来，然后取一条可能的路径进行分类讨论，易得知在题设条件下，经过每个点的路径有且仅有两种来源，左上方和右上方，因此我们将对这两个方向进行讨论。</p><p>对于这样的一个数字三角形，我们对其纵向分行，斜向分列，共有五行五列，令下标从1开始，以其中唯一不重复的元素1为例，即为<code>f[3][2]</code>，那么我们的<code>f[i][j]</code>表示的即为经过<code>a[i][j]</code>的所有路径数字和最大值。</p><p>那么按照这种规则和上面提到的沿左上方和右上方的路径，我们可以对集合进行划分，其中以唯一不重复的元素1为例，对应的路径来源分别来自于上方的3和8。我们可以得到状态转移方程如下：<br /><code>f[i][j] = max(f[i-1][j-1],f[i-1][j]) + a[i][j];</code><br />那么代码如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br><br>const int <span class="hljs-symbol">N</span> = <span class="hljs-number">510</span>,<span class="hljs-symbol">INF</span> = <span class="hljs-number">1e9</span>;<br><br>int n;<br>int a[<span class="hljs-symbol">N</span>][<span class="hljs-symbol">N</span>];<br>int f[<span class="hljs-symbol">N</span>][<span class="hljs-symbol">N</span>];<br><br>int main()<br>&#123;<br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    for(int i =<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        for(int j = <span class="hljs-number">1</span>;j&lt;=i;j++)<br>            scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]);<br>    <br>    for(int i = <span class="hljs-number">0</span>;i&lt;=n;i++)<br>        for(int j = <span class="hljs-number">0</span>;j&lt;=i+<span class="hljs-number">1</span>;j++)    //每行多初始化两个，因为最右侧元素右上方的元素和最左侧元素左上方的元素<br>            f[i][j] = -<span class="hljs-symbol">INF</span>;          //实际上虽然不存在但也要纳入动态规划两种分类方式的范围，因此也需要初始化为-<span class="hljs-symbol">INF</span>   <br>    <br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>    for(int i = <span class="hljs-number">2</span>;i&lt;=n;i++)<br>        for(int j = <span class="hljs-number">1</span>;j&lt;=i;j++)<br>            f[i][j] = max(f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+a[i][j],f[i<span class="hljs-number">-1</span>][j]+a[i][j]);<br>    int res = -<span class="hljs-symbol">INF</span>;<br>    for(int i = <span class="hljs-number">1</span>;i&lt;=n;i++) res = max(res,f[n][i]);<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,res);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="问题优化"><a class="markdownIt-Anchor" href="#问题优化"></a> 问题优化</h5><p>与背包问题同样，该问题也可以进行一维优化，但是要注意初始化的顺序和位置，核心代码优化如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j&lt;=n+<span class="hljs-number">1</span>;j++)    <span class="hljs-comment">//每行多初始化两个，因为最右侧元素右上方的元素和最左侧元素左上方的元素</span><br>        f[j] = -INF;          <span class="hljs-comment">//实际上虽然不存在但也要纳入动态规划两种分类方式的范围，因此也需要初始化为-INF   </span><br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;f[<span class="hljs-number">1</span>]);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=i;j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[j]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i;j&gt;=<span class="hljs-number">1</span>;j--)<br>            f[j] = <span class="hljs-built_in">max</span>(f[j<span class="hljs-number">-1</span>]+a[j],f[j]+a[j]);<br>    &#125;<br><br>    <span class="hljs-type">int</span> res = -INF;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) res = <span class="hljs-built_in">max</span>(res,f[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最长上升子序列"><a class="markdownIt-Anchor" href="#最长上升子序列"></a> 最长上升子序列</h4><p>给定一个长度为 N 的数列，求数值严格单调递增的子序列的长度最长是多少。</p><p>首先还是定义集合，将集合<code>f[i]</code>定义为：所有以<code>i</code>结尾的上升子序列的最大长度，若当前数<code>a[i]&gt;a[j]</code>，才满足上升子序列的条件，此时<code>f[i] = f[j] + 1;</code>所以状态转移方程如下<br /><code>f[i] = max(f[j] + 1); j = 0,1,2,...,i且a[i] &gt; a[j];</code><br />最后我们再遍历一下所有的<code>f[i]</code>，取得<code>f[i]</code>中的最大值即为所求，那么核心代码如下：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> main()<br>&#123;<br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;<span class="hljs-built_in">n</span>);<br>    for(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;i&lt;=<span class="hljs-built_in">n</span>;i++)<br>        scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    for(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;i&lt;=<span class="hljs-built_in">n</span>;i++)<br>    &#123;<br>        f[i] = <span class="hljs-number">1</span>;<br>        for(<span class="hljs-built_in">int</span> j = <span class="hljs-number">1</span>;j&lt;i;j++)<br>            <span class="hljs-built_in">if</span>(a[i]&gt;a[j])<br>                f[i] = <span class="hljs-built_in">max</span>(f[j]+<span class="hljs-number">1</span>,f[i]);<br>    &#125;<br>    <span class="hljs-built_in">int</span> res = <span class="hljs-number">0</span>;<br>    for(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;i&lt;=<span class="hljs-built_in">n</span>;i++) res = <span class="hljs-built_in">max</span>(res,f[i]);<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,res);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最长上升子序列升级版"><a class="markdownIt-Anchor" href="#最长上升子序列升级版"></a> 最长上升子序列升级版</h4><p>上述的做法在数据级别为<code>10w</code>的时候会超时，如何优化到<code>nlogn</code>？</p><h5 id="问题优化-2"><a class="markdownIt-Anchor" href="#问题优化-2"></a> 问题优化</h5><p>我们对所有以<code>i</code>结尾的最长上升子序列进行研讨，假设第<code>i</code>个数可以接在某<strong>几</strong>个<strong>同长度</strong>上升子序列的后面，那么这几个上升子序列中，最后结尾元素最小的那个一定优于其他的选择，并且随着最长上升子序列长度的增加，其结尾的值一定是单调递增的。该结论可以得到证明</p><p>假设我们现有长度分别为<code>1，2，3，4，5，6</code>的上升子序列，如图所示，横坐标代表序列的长度，纵坐标代表结尾元素的最小值，我们可以采用反证法，假设长度为6的子序列的结尾元素最小值小于等于长度为5的，那么长度为6的子序列的第五个数一定比长度为5的子序列最后一个数更小，我们又能找到一个比我们存储的长度为5的子序列末尾元素更小的子序列，与设定矛盾，因此可以得出我们的上升子序列的结尾元素值一定随着长度递增。由此，我们可以采用<strong>二分</strong>的方法来找到我们要找的子序列长度。</p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301062051060.png" alt="子序列长度与结尾元素最小值的关系" /></p><p>现在假设需要寻找一个合适长度的子序列，按照前面的推导，我们需要找到一个小于当前元素<code>a[i]</code>的子序列的长度，这些子序列都满足结尾元素最小，且由上面的结论，这些子序列结尾元素的值随着长度递增，因此我们可以采用<strong>二分</strong>的方法，找到这一批子序列中，结尾元素小于<code>a[i]</code>的长度最大的子序列，从而优化了时间复杂度。假设长度为5的子序列结尾元素值大于<code>a[i]</code>，而长度为4的子序列结尾元素值小于<code>a[i]</code>，我们就可以确定总的上升子序列长度为<code>4 + 1 = 5</code></p><p>这段优化的代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include &lt;iostream&gt;</span><br><span class="hljs-comment">#include &lt;algorithm&gt;</span><br><br>using namespace std;<br><br>const <span class="hljs-keyword">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-keyword">int</span> a[N]; <span class="hljs-regexp">//</span>存储数列中的数<br><span class="hljs-keyword">int</span> <span class="hljs-string">q[N]</span>; <span class="hljs-regexp">//</span>存储所有不同长度上升子序列结尾最小值<br><br><span class="hljs-keyword">int</span> main()<br>&#123;<br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++) scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-string">q[0]</span> = -<span class="hljs-number">2</span>e9;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>,r = len;<br>        <span class="hljs-keyword">while</span>(l&lt;r)<br>        &#123;<br>            <span class="hljs-keyword">int</span> mid = l+r+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">q[mid]</span>&lt;a[i]) l = mid;<br>            <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        len = max(len,r+<span class="hljs-number">1</span>); <span class="hljs-regexp">//</span>我们的r即为找到的可以接过去的子序列长度<br>        <span class="hljs-string">q[r+1]</span> = a[i];  <span class="hljs-regexp">//r</span>+<span class="hljs-number">1</span>即为所求，因此此时的a[i]即使<span class="hljs-string">q[r+1]</span>对应的子序列结尾最小值<br>    &#125;<br>    <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,len);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最长公共子序列"><a class="markdownIt-Anchor" href="#最长公共子序列"></a> 最长公共子序列</h4><p>给定两个长度分别为 <code>N</code> 和 <code>M</code> 的字符串 <code>A</code> 和 <code>B</code>，求既是 <code>A</code> 的子序列又是 <code>B</code> 的子序列的字符串长度最长是多少。</p><p>经典的动态规划问题，注意不是子串（<strong>连续</strong>）而是子序列，因此不能用<code>kmp</code>来做，而是动态规划</p><p>我们的集合<code>f[i][j]</code>表示所有在模式串a前<code>i</code>个字母和被匹配序列b前<code>j</code>个字母中出现的子序列，属性为最大值，那么状态划分可以划分为四种情况：</p><p>假设我们用<code>00</code>表示同时都不包括<code>a[i]</code>和<code>b[j]</code>的，<code>11</code>表示同时包括，那么<code>10</code>就是包括<code>a[i]</code>不包括<code>b[j]</code>，<code>01</code>就是包括<code>b[j]</code>不包括<code>a[i]</code>；其中<code>00</code>的情况对应的是<code>f[i-1][j-1]</code>，<code>11</code>对应的是<code>f[i-1][j-1] + 1</code>。当然了这种情况并不一定<strong>存在</strong>，因为一定要满足题设条件<code>a[i] = b[j]</code>。</p><p>然而对应于<code>01</code>和<code>10</code>的两种情况求出来较为困难，这时我们可以采用一种“<strong>放缩</strong>”的思想，我们将<code>01</code>对应的情况扩大为<code>f[i-1][j]</code>，我们可以注意到<code>f[i-1][j]</code>的含义是所有在<code>a[i-1]</code>和<code>b[j]</code>中出现的子序列，这其中<strong>包括但不仅限于</strong>选了<code>b[j]</code>不选<code>a[i]</code>的情况，然而我们动态规划的状态转移方程求的是最大值，因此即使状态之间有重复，只要没有遗漏，就不会影响我们最终的结果，因此利用<strong>放缩</strong>的技巧可以快速得出答案。同理，<code>10</code>的情况我们可以用<code>f[i][j-1]</code>来表示，由此我们得出了最终的状态转移方程：<br /><code>f[i][j] = max(f[i-1][j-1],f[i][j-1],f[i-1][j],f[i-1][j-1] + 1;</code><br />那么最终的核心代码如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs prolog">int main()<br>&#123;<br>    scanf(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);<br>    scanf(<span class="hljs-string">&quot;%s %s&quot;</span>,a+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>);<br>    for(int i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        for(int j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>        &#123;<br>            f[i][j] = max(f[i<span class="hljs-number">-1</span>][j],f[i][j<span class="hljs-number">-1</span>]);<br>            if(a[i] == b[j]) f[i][j] = max(f[i][j],f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>        &#125;<br>    <br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,f[n][m]);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最短编辑距离"><a class="markdownIt-Anchor" href="#最短编辑距离"></a> 最短编辑距离</h4><p>题意大致是给定序列<code>A</code>和<code>B</code>，对<code>A</code>经过插入字符，删除字符，替换字符三种限定操作使其转换为<code>B</code>，问至少需要几次操作。依题意集合的属性明显为长度的最小值，集合<code>f[i][j]</code>代表所有将<code>a[1~i]</code>变为<code>b[1~j]</code>的操作方式；那么集合划分可以按照操作方式划分为，最后一次操作是删除<code>a[i]</code>，添加<code>a[i]</code>，更改<code>a[i]</code>三种:</p><p>其中删除操作对应的状态是<code>f[i-1][j] + 1</code>（即对应<code>a[1~i-1</code>]与<code>b[1~j]</code>匹配的状态加上该步删除操作。<br />插入操作对应的是<code>a[1~i]</code>与<code>b[1~j-1]</code>匹配的状态，再加上该步添加<code>a[i]</code>的操作，即<code>f[i][j-1] + 1</code><br />修改操作对应的是<code>a[1~i-1]</code>与<code>b[1~j-1]</code>匹配的状态，加上一个<code>a[i]</code>与<code>b[j]</code>不相等情况下的修改操作，如果二者已经相等我们不需要加上任何操作，即<code>f[i-1][j-1] + 1/0</code><br />综上所述，状态转移方程为：<code>f[i][j] = min(f[i-1][j]+1,f[i][j-1]+1,f[i-1][j-1]+1/0);</code></p><p>核心代码如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs prolog">int main()<br>&#123;<br>    scanf(<span class="hljs-string">&quot;%d%s&quot;</span>,&amp;n,a+<span class="hljs-number">1</span>);<br>    scanf(<span class="hljs-string">&quot;%d%s&quot;</span>,&amp;m,b+<span class="hljs-number">1</span>);<br><br>    for(int i = <span class="hljs-number">0</span>;i&lt;=m;i++) f[<span class="hljs-number">0</span>][i] = i;  //对应a中无字符情况，需要一直添加<br>    for(int i = <span class="hljs-number">0</span>;i&lt;=n;i++) f[i][<span class="hljs-number">0</span>] = i;  //对应b中无字符情况，需要一直删除<br><br>    for(int i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        for(int j = <span class="hljs-number">1</span>;j&lt;=m;j++)<br>        &#123;<br>            f[i][j] = min(f[i<span class="hljs-number">-1</span>][j]+<span class="hljs-number">1</span>,f[i][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);  //增删<br>            if(a[i]==b[j]) f[i][j] = min(f[i][j],f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]);<br>            else f[i][j] = min(f[i][j],f[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>);  //改的两种情况<br>        &#125;<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,f[n][m]);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p id="1"></p><h4 id="编辑距离"><a class="markdownIt-Anchor" href="#编辑距离"></a> 编辑距离</h4><p>基础操作还是上题中的三种，然而条件换了约束，给定<code>n</code>种序列和<code>m</code>次询问，每次询问给出一个目标转换序列和限定转换次数，每次询问需求出<code>n</code>个字符串中可以在限定操作次数下转换为目标序列的个数，题目规定所有字符串长度均不超过10且均为小写字母。</p><p>那么上一题已经求出了每次匹配对应的最小操作次数，我们只需要求出每个序列的最短编辑距离，与限定次数对比即可求出答案。</p><p>核心代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,str[i]+<span class="hljs-number">1</span>); <span class="hljs-comment">//输入n个字符串</span><br><br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">char</span> s[N];<br>        <span class="hljs-type">int</span> limit;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d&quot;</span>,s+<span class="hljs-number">1</span>,&amp;limit);<br><br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++)<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">edit_distance</span>(str[i],s)&lt;=limit)<br>                res ++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,res);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其中的<code>edit_distance</code>将上题中核心代码修改为函数即可。</p><h4 id="区间dp-石子合并问题"><a class="markdownIt-Anchor" href="#区间dp-石子合并问题"></a> 区间DP-石子合并问题</h4><p>多堆石子，每次合并<strong>相邻</strong>两堆，不同堆石子之间合并花费的代价（体力）不同，选出合并代价最小的合并方法。</p><p>由题意，<code>f[i][j]</code>表示的集合是所有将第<code>i</code>堆石子到第<code>j</code>堆石子合并成一堆的合并方式，属性为代价的最小值。那么我们可以将状态进行划分：</p><p>假设<code>i</code>到<code>j</code>之间的石子有<code>num = j - i + 1</code>堆，设在这<code>num</code>堆石子中选出第<code>k</code>个为分界点，那么石子可以分为<code>[i,k]</code>,<code>[k+1,j]</code>两个部分，那么将这两堆合并的代价是多少呢？这个代价实际上就是从第<code>i</code>堆到第<code>j</code>堆石子的总重量，这个可以很轻松的用前缀和<code>s[j]-s[i-1]</code>表示出来，那么我们的状态转移方程可以表示为：<br /><code>f[i][j] = min(f[i][k]+f[k+1][j] + (s[j] - s[i-1])), k = i,...,j-1;</code></p><p>那么最后核心代码如下：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> main()<br>&#123;<br>    scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;<span class="hljs-built_in">n</span>);<br>    for(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;i&lt;=<span class="hljs-built_in">n</span>;i++) scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    for(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;i&lt;=<span class="hljs-built_in">n</span>;i++) a[i] +=a[i-<span class="hljs-number">1</span>];<br>    for(<span class="hljs-built_in">int</span> <span class="hljs-built_in">len</span> = <span class="hljs-number">2</span>;<span class="hljs-built_in">len</span>&lt;=<span class="hljs-built_in">n</span>;<span class="hljs-built_in">len</span>++) //区间长度为<span class="hljs-number">1</span>的话，代价是<span class="hljs-number">0</span><br>        for(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;i + <span class="hljs-built_in">len</span> - <span class="hljs-number">1</span>&lt;=<span class="hljs-built_in">n</span>;i++)<br>        &#123;<br>            <span class="hljs-built_in">int</span> l = i , r = i + <span class="hljs-built_in">len</span> - <span class="hljs-number">1</span>;<br>            f[l][r] = <span class="hljs-number">1</span>e9;<br>            for(<span class="hljs-built_in">int</span> k = l;k&lt;r;k++)<br>                f[l][r] = <span class="hljs-built_in">min</span>(f[l][k]+f[k+<span class="hljs-number">1</span>][r]+a[r]-a[l-<span class="hljs-number">1</span>],f[l][r]);<br>        &#125;<br>    printf(<span class="hljs-string">&quot;%d\n&quot;</span>,f[<span class="hljs-number">1</span>][<span class="hljs-built_in">n</span>]);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4><p>进行到动态规划的第二部分，可以把握其中状态定义和状态划分的几个要点</p><ol><li><code>f[i][j]</code>往往是以集合中最后的某个状态开始分析，分析该状态承前的几种状态如何向该状态进行转移，从而进行集合划分</li><li>考虑到1中划分方式，<code>f[i][j]</code>的状态转移往往与<code>f[i-1][j]</code>和<code>f[i][j-1]</code>相关，因此我们要求状态转移方程的遍历在代码中从1开始，并且对<code>f[0][0]</code>此类边界情况进行初始化讨论</li><li>注意某些状态需要一定条件才能满足，例如<a href="#%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB">编辑距离</a>中，只有<code>a[i]</code>和<code>b[j]</code>相等时才能触发修改<code>a[i]</code>这一操作，对这类状态我们需要进行条件判断。</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法、DSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>算法</tag>
      
      <tag>模板题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划-1</title>
    <link href="/2023/01/03/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-1/"/>
    <url>/2023/01/03/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-1/</url>
    
    <content type="html"><![CDATA[<h2 align = "center">动态规划-背包问题</h2><p>动态规划可以分为状态表示和状态计算，首先思考整个问题需要用几维的状态来表示，例如背包问题，可以用两维来表示；状态计算就是找出状态转移的方程。DP优化就是对状态标识或者计算方程做等价变形，因此一般建议先写出基本的动态规划写法，不考虑优化。</p><ol><li>状态表示<code>f(i,j)</code><br />状态表示可以分为集合和属性两种。属性即题目所问的最大值（如背包问题中的价值最大），最小值，数量等属性。集合表示的是选法的集合，而非物品的集合，集合需要满足条件（以01背包题意为例）：<ol><li>只从前<code>i</code>个物品中选</li><li>选出来的物品的总体积<code>V&lt;=j</code><br />满足这两个条件的所有选法的一个集合即是<code>f(i,j)</code>，我们实时更新的题目的答案是集合中的某个属性，例如上文中提到的“最大值”。因此答案即可表示为<code>f(N,V)</code></li></ol></li><li>状态计算<br />对应的是集合的划分，以01背包为例，<code>f(i,j)</code>作为选法的集合，因此我们可以将<code>f(i,j)</code>如图划分为两部分，一部分包含选第<code>i</code>个物品的情况，一部分包含不含<code>i</code>的情况。<ol><li>从<code>1~i</code>中选且不含<code>i</code>，总体积不超过<code>j</code>，这种情况下的最大值，因此其实是<code>f(i-1,j)</code></li><li>所有从<code>1~i</code>中选，总体积不超过<code>j</code>，且必须包含第<code>i</code>个物品，这种情况下的最大值。这种方法不好直接表示，因此可以用其他方法来表示：我们首先把所有选法中的第<code>i</code>个物品全部去掉，即从<code>i-1</code>中选，最后以这种情况下选法的结果再加上第<code>i</code>个物品的价值，由于我们选第<code>i</code>个物品的体积上限是<code>j</code>，去掉<code>i</code>的话，体积上限就是<code>j-V[i]</code>，因此这种情况的表示就很明显了，即为<code>f(i-1,j-V[i])+W[i]</code><br />需要注意的是这种情况下，实际上有可能不存在，在<code>v[i]&gt;j</code>的情况下<br />因此我们可以知道，对于01背包问题来说，我们最终的状态转移方程：<br /><code>f(i,j) = max(f(i-1,j),f(i-1,j-v[i]) + w[i])</code></li></ol></li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301021042999.png" alt="动态规划集合划分" /></p><h4 id="01背包问题"><a class="markdownIt-Anchor" href="#01背包问题"></a> 01背包问题</h4><p>有<code>N</code>个物品和容量为<code>V</code>的背包，每个物品有两个属性，<code>V[i]</code>与<code>W[i]</code>；每件物品仅能使用一次；挑选一些物品，使总体积小于背包容量，同时拥有尽可能大的价值，此类问题被称为01背包问题。</p><h5 id="典型解答"><a class="markdownIt-Anchor" href="#典型解答"></a> 典型解答：</h5><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs inform7">#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br><br>const int N = 1010;<br><br>int n,m;<br>int v<span class="hljs-comment">[N]</span>,w<span class="hljs-comment">[N]</span>;<br>int f<span class="hljs-comment">[N]</span><span class="hljs-comment">[N]</span>;<br><br>int main()<br>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    for(int i = 1;i&lt;=n;i++) cin &gt;&gt; v<span class="hljs-comment">[i]</span> &gt;&gt; w<span class="hljs-comment">[i]</span>;<br>    for(int i = 1;i&lt;=n;i++)<br>        for(int j = 0;j&lt;=m;j++)<br>        &#123;<br>            f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = f<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>;<br>            if(j &gt;= v<span class="hljs-comment">[i]</span>)  f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>]</span>+w<span class="hljs-comment">[i]</span>);<br><br>        &#125;<br>    cout &lt;&lt; f<span class="hljs-comment">[n]</span><span class="hljs-comment">[m]</span> &lt;&lt; endl;<br>    return 0;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="问题优化"><a class="markdownIt-Anchor" href="#问题优化"></a> 问题优化</h5><ol><li>如何将01背包问题优化成一维的呢？<br />我们删掉了第一维：在前<code>i</code>个物品中取，因此现在的<code>f[j]</code>表示拿了总体积不超过j的物品的最大价值。</li><li>转化为一维的前提条件<br />我们观察代码发现每次更新对于循环中的下一组<code>i</code>，只需要用<code>i-1</code>来更新当前的值，而不需要再往前的数组，因此我们可以在本次更新时覆盖<code>i-1</code>之前的，因为根本用不到。<br />同时对于j的更新，我们每次只需要使用之前<code>i-1</code>时的<code>j</code>或者<code>j-v[i]</code>，不会用到后面的值，因此我们从后往前倒着更新，也可以直接覆盖之前循环中的值，总的来说，只用一维循环即可。</li><li>如何转化<br />只用一个数组，如果不拿第<code>i</code>件，和前面的一样，不用更新；如果拿了第i件需要和前一位<code>i-1</code>上的比较得出<code>max</code>,更新方式变为：<code>f[j] = max(f[j],f[j - v[i]]+w[i])</code>；每次<code>i++</code>都从后往前更新一遍<code>f</code>数组，观测每个位置的值是否更新。<br />因此01背包的优化代码核心部分如下</li></ol><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">for(int i = 1;i&lt;=n;i++)<br>    for(int j = m;j&gt;=v<span class="hljs-comment">[i]</span>;j--)<br>        f<span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>]</span> + w<span class="hljs-comment">[i]</span>);<br></code></pre></td></tr></table></figure><h4 id="完全背包问题"><a class="markdownIt-Anchor" href="#完全背包问题"></a> 完全背包问题</h4><p>每件物品无限个，只要体积够用无限装物品</p><p>跟01背包很像，整体就是多了一个选了几个的参数<code>k</code><br /><code>f[i][j] = f[i-1][j-v[i]*k]+w[i]*k</code>;<br />因此朴素做法显而易见，核心代码如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs inform7">cin &gt;&gt; n &gt;&gt; m;<br>for(int i = 1;i&lt;=n;i++) cin &gt;&gt; v<span class="hljs-comment">[i]</span> &gt;&gt; w<span class="hljs-comment">[i]</span>;<br>for(int i = 1;i&lt;=n;i++)<br>    for(int j = 0;j&lt;=m;j++)<br>        for(int k = 0;k*v<span class="hljs-comment">[i]</span>&lt;=j;k++)<br>        f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>*k]</span>+w<span class="hljs-comment">[i]</span>*k);<br>cout &lt;&lt; f<span class="hljs-comment">[n]</span><span class="hljs-comment">[m]</span> &lt;&lt; endl;<br>return 0;<br></code></pre></td></tr></table></figure><h5 id="问题优化-2"><a class="markdownIt-Anchor" href="#问题优化-2"></a> 问题优化</h5><p>这种三重循环的写法数据稍微多点就会超时，因此可以优化到二重循环<br />我们注意到如图所示的情况，发现<code>f[i][j]</code>可以从<code>f[i][j - v]</code>推导出来，因此<code>f[i][j] = max(f[i-1][j],f[i][j - v] + w[i])</code></p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301022013044.png" alt="f[i][j]的推导关系" /></p><p>如此，核心代码变为</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs inform7">cin &gt;&gt; n &gt;&gt; m;<br>for(int i = 1;i&lt;=n;i++) cin &gt;&gt; v<span class="hljs-comment">[i]</span> &gt;&gt; w<span class="hljs-comment">[i]</span>;<br>for(int i = 1;i&lt;=n;i++)<br>    for(int j = 0;j&lt;=m;j++)<br>    &#123;<br>        f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = f<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>;<br>        if(j&gt;=v<span class="hljs-comment">[i]</span>)<br>            f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>]</span>+w<span class="hljs-comment">[i]</span>);<br>    &#125;<br>cout &lt;&lt; f<span class="hljs-comment">[n]</span><span class="hljs-comment">[m]</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>之后继续进行一维优化，参考01背包的例子，完全背包做一维优化的时候不需要考虑<code>f[j-v[i]]</code>的更新问题，因为这里按照更新顺序确实是第<code>i</code>重循环的值，与二维的代码符合，而01背包中需要更新第<code>i-1</code>重循环的值，因此这里完全背包不需要倒着循环，优化后核心代码如下</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">cin &gt;&gt; n &gt;&gt; m;<br>for(int i = 1;i&lt;=n;i++) cin &gt;&gt; v<span class="hljs-comment">[i]</span> &gt;&gt; w<span class="hljs-comment">[i]</span>;<br>for(int i = 1;i&lt;=n;i++)<br>    for(int j = v<span class="hljs-comment">[i]</span>;j&lt;=m;j++)<br>    &#123;<br>        if(j&gt;=v<span class="hljs-comment">[i]</span>)<br>            f<span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[j-v<span class="hljs-comment">[i]</span>]</span>+w<span class="hljs-comment">[i]</span>);<br>    &#125;<br>cout &lt;&lt; f<span class="hljs-comment">[m]</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p>搞笑的事情发生了，我们可以发现01背包问题与完全背包问题的最终代码只在第二重循环的顺序上有差别，因此代码上的微小差距其实可能是思维上的天翻地覆，一定要把握推导过程而不是死记硬背。</p><h4 id="多重背包问题"><a class="markdownIt-Anchor" href="#多重背包问题"></a> 多重背包问题</h4><p>每个物品个数不一样，每个物品最多有<code>S[i]</code>个，多重背包问题的状态转移方程和完全背包问题极为类似，因为本质上只是加了选择物品的上限。<br /><code>f[i][j] = max(f[i-1][j-v[i]*k] + w[i]*k); k = 0,1,2,...,s[i];</code><br />因此朴素解法代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> v[N],w[N];<br><span class="hljs-type">int</span> f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++) cin &gt;&gt; v[i] &gt;&gt; w[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = v[i];j&lt;=m;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(j&gt;=v[i])<br>                f[j] = <span class="hljs-built_in">max</span>(f[j],f[j-v[i]]+w[i]);<br>        &#125;<br>    cout &lt;&lt; f[m] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="问题优化-3"><a class="markdownIt-Anchor" href="#问题优化-3"></a> 问题优化</h5><p>朴素解法在数据上限为100的情况下不会超时，但是某种多重背包问题数据上限更高，因此需要优化后才不会导致超时问题，我们称这种加数据上限的多重背包问题为多重背包Ⅱ。</p><p>这里我们想要继续按照完全背包的方式优化，然而将会发现f[i][j]的推导关系如下：</p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301030918138.png" alt="多重背包f[i][j]推导关系" /></p><p>这里的<code>f[i][j]</code>与<code>f[i][j-v]</code>并不完全相似，在最大值关系中不能直接推导，因此我们需要另一种优化方式<br />我们参考海明码的校验位与被校验位的关系，即任何一位自然数可以由2的整数幂或者2的整数幂本身凑出来，例如<code>3 = 1 + 2；5 = 1 + 4；</code>等等，因此我们可以把其中的一维优化成<code>logn</code>级别，我们用1~2整数幂中的数凑出一个小于目标数值的数，最后再加上差值即可。例如下图，我们将200凑成如下的数，最后加上73即可凑出200以内的所有数。</p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202301030925008.png" alt="凑数关系" /></p><p>这也就是二进制优化的思想。代码和代码注释如下：</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-keyword">int</span> main()<br>&#123;<br>    cin &gt;&gt; n &gt;&gt; m<span class="hljs-comment">;</span><br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">cnt</span> = <span class="hljs-number">0</span><span class="hljs-comment">; //存储所有新的物品的编号</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span><span class="hljs-comment">;i&lt;=n;i++)</span><br>    &#123;<br>        <span class="hljs-keyword">int</span> a,b,s<span class="hljs-comment">;</span><br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; s<span class="hljs-comment">; //读入当前物品的体积价值与个数</span><br>        <span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>        <span class="hljs-keyword">while</span>(k&lt;=s)   <span class="hljs-comment">//把k个物品打包在一起</span><br>        &#123;<br>            <span class="hljs-keyword">cnt</span>++<span class="hljs-comment">;</span><br>            v[<span class="hljs-keyword">cnt</span>] = a*k<span class="hljs-comment">;</span><br>            w[<span class="hljs-keyword">cnt</span>] = b*k<span class="hljs-comment">;</span><br>            s-=k<span class="hljs-comment">;</span><br>            k*=<span class="hljs-number">2</span><span class="hljs-comment">;</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(s &gt; <span class="hljs-number">0</span>)   <span class="hljs-comment">//还剩下一些需要补上（非二次幂，例如200中的73）</span><br>        &#123;<br>            <span class="hljs-keyword">cnt</span> ++ <span class="hljs-comment">;</span><br>            v[<span class="hljs-keyword">cnt</span>] = a*s<span class="hljs-comment">;</span><br>            w[<span class="hljs-keyword">cnt</span>] = b*s<span class="hljs-comment">;</span><br>        &#125;<br>    &#125;<br>    n = <span class="hljs-keyword">cnt</span><span class="hljs-comment">;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span><span class="hljs-comment">;i&lt;=n;i++)  //以cnt作为物品个数做一次01背包</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = m<span class="hljs-comment">;j&gt;=v[i];j--)&#123;</span><br>            f[j] = max(f[j],f[j-v[i]]+w[i])<span class="hljs-comment">;</span><br>        &#125;<br>    cout &lt;&lt; f[m] &lt;&lt; endl<span class="hljs-comment">;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>该算法的数组上限如下：<br />一共有最多<code>N</code>件物品，每种物品取最多<code>S</code>件，本题中<code>N = 1000; S = 2000;</code>每种物品最多拆分打包成<code>log2000</code>，因此我们的数组需要开到<code>1000*11</code>的数组上限，从而不至于引发RE</p><h4 id="分组背包问题"><a class="markdownIt-Anchor" href="#分组背包问题"></a> 分组背包问题</h4><p>物品有<code>N</code>组，每组物品里有若干个，例如水果，蔬菜组分别有苹果香蕉，白菜番茄等等；每一组里最多只能选一个物品，选了某种水果就不能选其他水果，在这个限制条件下找最大价值。</p><p>观察题意发现，分组背包与完全背包问题的差别在于，完全背包问题考虑的是第<code>i</code>个物品选几个，分组背包考虑的问题是第<code>i</code>组物品选<code>'哪'</code>个</p><p>那么状态转移方程可以划分为，第i组物品一个都不选，和第i组物品中选第k个物品，那么状态转移方程为：<br /><code>f[i][j] = max(f[i-1][j],f[i-1][j-v[i][k]] + w[i][k])</code><br />根据状态转移方程写出代码如下：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs inform7">#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br><br>const int N = 110;<br>int n,m;<br>int v<span class="hljs-comment">[N]</span><span class="hljs-comment">[N]</span>,w<span class="hljs-comment">[N]</span><span class="hljs-comment">[N]</span>,s<span class="hljs-comment">[N]</span>;<br>int f<span class="hljs-comment">[N]</span>;<br><br>int main()<br>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    for(int i = 1;i&lt;=n;i++)<br>    &#123;<br>        cin &gt;&gt; s<span class="hljs-comment">[i]</span>;<br>        for(int j = 0;j&lt;s<span class="hljs-comment">[i]</span>;j++)<br>            cin &gt;&gt; v<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> &gt;&gt; w<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>;<br>    &#125;<br>    for(int i = 1;i&lt;=n;i++)<br>        for(int j = m;j&gt;=0;j--)<br>            for(int k = 0;k&lt;s<span class="hljs-comment">[i]</span>;k++)<br>            &#123;<br>                if(v<span class="hljs-comment">[i]</span><span class="hljs-comment">[k]</span> &lt;= j)<br>                    f<span class="hljs-comment">[j]</span> = max(f<span class="hljs-comment">[j]</span>,f<span class="hljs-comment">[j - v<span class="hljs-comment">[i]</span><span class="hljs-comment">[k]</span>]</span> + w<span class="hljs-comment">[i]</span><span class="hljs-comment">[k]</span>);<br>            &#125;<br>    <br>    cout &lt;&lt; f<span class="hljs-comment">[m]</span> &lt;&lt; endl;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么就到此为止吧，再写就不礼貌了，还是要谢谢你，背包问题💘</p><blockquote><p><s>本篇所有思想来自于AcWing大雪菜老师，仅作学习记录使用</s></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法、DSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>算法</tag>
      
      <tag>模板题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL</title>
    <link href="/2022/11/12/STL/"/>
    <url>/2022/11/12/STL/</url>
    
    <content type="html"><![CDATA[<h2 align = "center">STL</h2><p><code>a.size()</code>和<code>a.empty()</code>不是唯一的，每个stl都可以如此调用，操作复杂度为<code>o(1)</code>直接取</p><h5 id="vector"><a class="markdownIt-Anchor" href="#vector"></a> vector</h5><p>变长数组，动态扩容，双倍扩容，分摊复杂度o(1)<br /><code>vector&lt;int&gt; a(10,3)</code>定义一个长度为10的vector，里面每个数都是3</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">front</span>()/<span class="hljs-title">back</span>();<span class="hljs-title">push_back</span>()/<span class="hljs-variable">pop_back</span>;<span class="hljs-title">begin</span>()/<span class="hljs-title">end</span>();<span class="hljs-title">empty</span>();<span class="hljs-title">erase</span>();</span><br></code></pre></td></tr></table></figure><p><code>for(auto x:a)</code>为C++11中引入的范围遍历，代码更短效率更高。<br />vector支持比较运算</p><h5 id="pair"><a class="markdownIt-Anchor" href="#pair"></a> pair</h5><p><code>pair&lt;int,int&gt;</code>存储一个二元组，前后变量类型可以任意，<code>eg:pair&lt;int,string&gt;</code>，其中调用<code>a.first</code>返回第一个元素，<code>a.second</code>返回第二个元素，也支持比较，以<code>first</code>为第一关键字，以<code>second</code>为第二关键字。可以同时存两种属性。甚至可以嵌套存储三个不同的属性。</p><h5 id="string"><a class="markdownIt-Anchor" href="#string"></a> string</h5><p>字符串,<code>substr()</code>返回某一个子串，<code>c_str()</code>返回一个字符数组的头指针（起始地址）。<br /><code>string a = &quot;lzyq&quot;,a += &quot;acwing&quot;;</code>可以实现字符串拼接<br /><code>a.substr(1,2)</code>即返回zy，省略第二个参数或溢出则返回整个字串<br /><code>size()/length()</code>返回字符串长度</p><h5 id="queue"><a class="markdownIt-Anchor" href="#queue"></a> queue</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">往队尾插入，<span class="hljs-built_in">push</span>();<br>返回队头元素，<span class="hljs-built_in">front</span>();<br>返回队尾元素，<span class="hljs-built_in">back</span>();<br>把队头弹出，<span class="hljs-built_in">pop</span>();<br>无法<span class="hljs-attribute">clear</span>()<br></code></pre></td></tr></table></figure><h5 id="priority_queue"><a class="markdownIt-Anchor" href="#priority_queue"></a> priority_queue</h5><p>优先级队列，默认是大根堆<br /><code>#include &lt;queue&gt;</code></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">priority_queue&lt;<span class="hljs-type">int</span>&gt; heap;<span class="hljs-comment">//大根堆</span><br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt;&gt; heap;<span class="hljs-comment">//小根堆</span><br><span class="hljs-built_in">push</span>()往堆里插入元素，<span class="hljs-built_in">top</span>()返回堆顶，<span class="hljs-built_in">pop</span>()弹出堆顶，类似于<span class="hljs-built_in">delmax</span>()<br>没有clear函数<br></code></pre></td></tr></table></figure><h5 id="stack"><a class="markdownIt-Anchor" href="#stack"></a> stack</h5><p>栈</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">push</span>();<span class="hljs-attribute">top</span>();<span class="hljs-built_in">pop</span>();<span class="hljs-built_in">size</span>();<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></table></figure><h5 id="deque"><a class="markdownIt-Anchor" href="#deque"></a> deque</h5><p>加强版vector，双端队列，队头队尾均可以插入删除，而且支持随机访问<code>[]</code></p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">size</span>();<span class="hljs-title">empty</span>();<span class="hljs-title">clear</span>();<span class="hljs-title">front</span>();<span class="hljs-title">back</span>();<span class="hljs-title">push_back</span>()/<span class="hljs-title">pop_back</span>();<span class="hljs-title">push_front</span>()/<span class="hljs-title">pop_front</span>();<span class="hljs-title">begin</span>()/<span class="hljs-title">end</span>();</span><br></code></pre></td></tr></table></figure><p>支持随机寻址，效率低到令人发指</p><h5 id="setmapmultisetmultimap"><a class="markdownIt-Anchor" href="#setmapmultisetmultimap"></a> set，map，multiset，multimap</h5><p><code>#include &lt;map&gt;</code><br />操作时间复杂度基本上都是<code>o(logn)</code><br />基于BBST(红黑树)，动态维护有序序列。</p><ol><li><code>set</code>里面不可以有重复元素，如果插入重复会被忽略，<code>multiset</code>可以有重复元素</li></ol><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">insert</span>()插入一个数;</span><br><span class="hljs-function"><span class="hljs-title">find</span>()查找一个数;</span><br><span class="hljs-function"><span class="hljs-title">count</span>()返回某个数的个数;</span><br><span class="hljs-function"><span class="hljs-title">erase</span>()</span><br>    输入是一个数则删除所有等于这个数的节点，输入迭代器，删除这个迭代器。<br><span class="hljs-function"><span class="hljs-title">lower_bound</span>()/<span class="hljs-title">upper_bound</span>();</span><br><span class="hljs-function">    前者返回大于等于<span class="hljs-variable">x</span>最小的数，后者返回大于<span class="hljs-variable">x</span>的最小的数。具有迷惑性。</span><br></code></pre></td></tr></table></figure><ol start="2"><li><code>map</code>和<code>multimap</code>也支持</li></ol><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">insert</span>();插入的数是一个pair<br>erase;输入的参数是pair或者迭代器<br><span class="hljs-built_in">find</span>();<br>可以像数组一样来使用<br>eg:map&lt;string,<span class="hljs-type">int</span>&gt; a;<br>a[<span class="hljs-string">&quot;lzyq&quot;</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">//即可完成映射</span><br><span class="hljs-built_in">lower_bound</span>()/<span class="hljs-built_in">upper_bound</span>();<br></code></pre></td></tr></table></figure><h5 id="unordered_setunordered_mapunordered_multisetunordered_multimap"><a class="markdownIt-Anchor" href="#unordered_setunordered_mapunordered_multisetunordered_multimap"></a> unordered_set，unordered_map，unordered_multiset，unordered_multimap</h5><p>基于哈希表来实现的，基本和上面的一样，增删改查时间复杂度都是<code>o(1)</code>,不支持<code>lower_bound()/upper_bound()</code>;也支持迭代器的++，–</p><h5 id="bitset"><a class="markdownIt-Anchor" href="#bitset"></a> bitset</h5><p>和位图应该是一个原理，但是不太一样，压缩成位图进行存储<br /><code>bitset&lt;10000&gt; A</code>定义一个长度为10000的bitset<br />支持<code>~,&amp;,|,^,&gt;&gt;,&lt;&lt;,&gt;&gt;,==,!=,[];</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">count</span>()返回有多少个<span class="hljs-number">1</span>;<br><span class="hljs-built_in">any</span>()判断是否至少有一个<span class="hljs-number">1</span>;<br><span class="hljs-attribute">none</span>()判断是否全为<span class="hljs-number">0</span>;<br><span class="hljs-built_in">set</span>()把所有位置变成<span class="hljs-number">1</span>;<br><span class="hljs-built_in">set</span>(k,v)把第k位变成v;<br><span class="hljs-built_in">reset</span>()把所有位变成<span class="hljs-number">0</span><br><span class="hljs-built_in">flip</span>()等价于~;<br><span class="hljs-built_in">flip</span>(k)把第k位取反;<br></code></pre></td></tr></table></figure><h5 id="list"><a class="markdownIt-Anchor" href="#list"></a> list</h5><p>列表，ListNode之类的</p><blockquote><p><s>事实上没啥用的东西，因为要用的时候直接搜索就好了</s></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>语言基础、DSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语言基础</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串哈希</title>
    <link href="/2022/11/12/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/"/>
    <url>/2022/11/12/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/</url>
    
    <content type="html"><![CDATA[<h2 align = "center">字符串哈希</h2><h4 id="开端"><a class="markdownIt-Anchor" href="#开端"></a> 开端</h4><p>核心在于把字符串想象成一个p进制的数，得出一个前缀的哈希值，p一般取131，13331时不会发生冲突，因为这个数会比较大，因此需要Mod Q处理，得到一个在0~Q-1之间。</p><h4 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h4><ol><li>首先数字不能映射成0，因为0的p进制还是0，因此多个同样的数字，不同的字符串就变成了同样的数字。</li><li>字符串哈希是一个假设不会发生冲突的过程，p取131或13331，Q取2^64，没有处理冲突的能力。</li><li>可以利用一个前缀哈希，利用一个公式计算出来任何一个字串的哈希值。</li><li>实质上不需要取模，计算机中可以利用unsigned long long 来存储所有的h，将溢出实现取模的效果。</li></ol><h4 id="求解方法"><a class="markdownIt-Anchor" href="#求解方法"></a> 求解方法</h4><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202211111713666.png" alt="求解方法" /><br />由此可见h[l-r] = h[r] - h[l] * P^(r-l+1)</p><h4 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h4><p>由此可知我们的结论，h[i] = h[i-1] * P + str[i];</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><center>AcWing 841.字符串哈希</center> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>,P = <span class="hljs-number">131</span>;<br><br><span class="hljs-keyword">typedef</span>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br><br><span class="hljs-type">int</span> n ,m;<br><span class="hljs-type">char</span> str[N];<br>ULL h[N],p[N];<br><br><span class="hljs-function">ULL <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> h[r]-h[l<span class="hljs-number">-1</span>]*p[r-l+<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%s&quot;</span>,&amp;n,&amp;m,str+<span class="hljs-number">1</span>);<br>    p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        p[i] = p[i<span class="hljs-number">-1</span>] * P;<br>        h[i] = h[i<span class="hljs-number">-1</span>] * P + str[i];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> l1,r1,l2,r2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;l1,&amp;r1,&amp;l2,&amp;r2);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">get</span>(l1,r1)==<span class="hljs-built_in">get</span>(l2,r2)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行截图"><a class="markdownIt-Anchor" href="#运行截图"></a> 运行截图</h4><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202211111721941.png" alt="运行截图" /></p>]]></content>
    
    
    <categories>
      
      <category>算法、DSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>算法</tag>
      
      <tag>模板题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>由直方图最大矩形引出单调栈问题</title>
    <link href="/2022/09/17/%E7%94%B1%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2%E5%BC%95%E5%87%BA%E5%8D%95%E8%B0%83%E6%A0%88%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/17/%E7%94%B1%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2%E5%BC%95%E5%87%BA%E5%8D%95%E8%B0%83%E6%A0%88%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 align = "center">由力扣84引出单调栈问题</h2><h3 align = "center">leetcode 84</h3><p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg" alt="" /></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">输入：heights = [2,1,5,6,2,3]<br>输出：10<br>解释：最大的矩形为图中红色区域，面积为 10<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg" alt="" /></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">输入： heights = [2,4]<br>输出： 4<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= heights.length &lt;=10^5</code></li><li><code>0 &lt;= heights[i] &lt;= 10^4</code></li></ul><h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3><ol><li>这一题一开始看到的时候是不太好想到单调栈的，然而在复习912数据结构的过程中，讲到栈之后邓俊辉老师的pdf中举了这个例题（图1.1），才恍然大悟可以用到单调栈，遂上网搜一下来练手，有所感悟</li></ol><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202209171604805.png" alt="图1.1" /></p><p>可以看到原理是很清晰的，然而由于邓老师大部分时候都是英文授课，因此还是有些不解的地方，自己挑战这一题还是失败了，于是开始看leetcode官方题解，发现讲的甚至更不通俗。。。反思之后才发现是自己对单调栈的用法根本不了解，这就引出了对于单调栈更深刻的学习，查阅资料之后才发现，单调栈是可以用来解决一系列的问题的时空复杂度均为o(n)的算法，例如解决The Next Greater Number问题(图1.2)</p><p><img src="https://cdn.jsdelivr.net/gh/lzyq0912/CycloneJokerimg/img/202209171609053.png" alt="图1.2" /></p><ol><li><p>那么接下来思路就很清晰了，单调栈问题的一个统一规律就是，在给出的一个数组中，找出从当前秩元素开始，沿某个方向的，第一个具备某个特征的数，这个特征往往是，较小，较大，或者其他可以用比较来判定的数。那么回到力扣84的这一题，寻找连续直方图最大矩形，本质上就是要找出每个元素尽力扩张出来的矩形的面积，然后进行对比，这个面积的计算过程需要<code>长度 * 宽度</code>，那么在当前长度（当前元素下）沿某个方向扩展（寻找宽度）就很符合单调栈的应用场景了。</p></li><li><p>首先我们枚举一个柱子<code>i</code>作为高，之后向左右两边扩展，使得扩展到的柱子的高度均不小于 <code>hh</code>。换句话说，我们需要找到<strong>左右两侧最近的高度小于 <code>hh</code> 的柱子</strong>，这样这两根柱子之间（不包括其本身）的所有柱子高度均不小于 <code>hh</code>，并且就是 <code>i</code> 能够扩展到的最远范围。</p><ul><li>我们用一个栈来存放当前<code>i</code>之前的j值，从栈底到栈顶，<code>j</code> 的值严格单调递增，同时对应的高度值也严格单调递增</li><li>当我们枚举到第 <code>i</code> 根柱子时，我们从栈顶不断地移除 <code>height[j]&gt;=height[i]</code> 的 <code>j</code> 值。在移除完毕后，栈顶的 <code>j</code> 值就一定满足 <code>height[j]&lt;height[i]</code>，此时 <code>j</code> 就是 <code>i</code> 左侧且最近的小于其高度的柱子。<br />这里会有一种特殊情况。如果我们移除了栈中所有的 <code>j</code> 值，那就说明 <code>i</code> 左侧所有柱子的高度都大于<code>height[i]</code>，那么我们可以认为 <code>i</code> 左侧且最近的小于其高度的柱子在位<code>j=-1</code>，它是一根 <strong>虚拟</strong> 的、高度无限低的柱子。这样的定义不会对我们的答案产生任何的影响，我们也称这根<strong>虚拟</strong>的柱子为「哨兵」。</li><li>我们再将 <code>i</code> 放入栈顶。再用相同的方法，我们从右向左进行遍历，就可以得到左侧的边界了。</li></ul></li><li><p>代码如下：</p></li></ol><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs excel">class Solution &#123;<br>publ<span class="hljs-symbol">ic:</span><br>    <span class="hljs-built_in">int</span> largestRectangleArea(vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; heights) &#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span> = heights.size();<br>        vector&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-built_in">left</span>(<span class="hljs-built_in">n</span>), <span class="hljs-built_in">right</span>(<span class="hljs-built_in">n</span>, <span class="hljs-built_in">n</span>);<br>        <br>        stack&lt;<span class="hljs-built_in">int</span>&gt; mono_stack;<br>        for (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">n</span>; ++i) &#123;<br>            while (!mono_stack.empty() &amp;&amp; heights[mono_stack.top()] &gt;= heights[i]) &#123;<br>                <span class="hljs-built_in">right</span>[mono_stack.top()] = i;<br>                mono_stack.pop();<br>            &#125;<br>            <span class="hljs-built_in">left</span>[i] = (mono_stack.empty() ? -<span class="hljs-number">1</span> <span class="hljs-symbol">:</span> mono_stack.top());<br>            mono_stack.push(i);<br>        &#125;<br>        <br>        <span class="hljs-built_in">int</span> ans = <span class="hljs-number">0</span>;<br>        for (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">n</span>; ++i) &#123;<br>            ans = <span class="hljs-built_in">max</span>(ans, (<span class="hljs-built_in">right</span>[i] - <span class="hljs-built_in">left</span>[i] - <span class="hljs-number">1</span>) * heights[i]);<br>        &#125;<br>        return ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="4"><li>时间复杂度分析：每个元素只需要进栈一次，出栈一次，因此时间复杂度<code>O(n)</code>，空间复杂度，申请了一个空间为<code>n</code>的栈，因此空间复杂度为<code>O(n)</code>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法、DSA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>算法</tag>
      
      <tag>模板题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/16/hello-world/"/>
    <url>/2022/09/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
